#%RAML 1.0
title: prosEO Product Archive Manager REST Services API
version: v0.1
protocols: [ HTTPS ] 
baseUri: /proseo/archive-mgr/{version}
mediaType: application/json

securitySchemes:
  basicAuth:
    description: Each request must contain the headers necessary for
                 basic authentication
    type: Basic Authentication
    describedBy:
      headers:
        Authorization:
          description: Used to send the Base64-encoded "username:password"
                       credentials
          type: string
      responses:
        401:
          description: |
            Unauthorized. Either the provided username and password
            combination is invalid, or the user is not allowed to access
            the content provided by the requested URL.

types:
  RestProductArchive: !include ../../../../../../model/src/main/resources/raml/types/productarchive.raml

resourceTypes:
  standard:
    get?:
      responses:          
        400:
          description: |
            The request sent to the server contains data which is not as expected e.g. invalid location URI
          headers:
            Warning: !include types/error.raml
        404:
          description: |
            The requested resource was not found                     
          headers:
            Warning: !include types/error.raml
    patch?:
      responses:          
        404:
          description: |
            The requested resource on which the modification is being attempted was not found              
          headers:
            Warning: !include types/error.raml
    delete?:
      responses:          
        404:
          description: | 
            The requested resource to delete was not found 
          headers:
            Warning: !include types/error.raml
              
/archives:
  type: standard
  get:
    description: |
      List of all product archives with no search criteria
     
      @param code the unique product archive name
      @return a response entity with either a list of product archives and HTTP status OK or an error message and an HTTP status
              indicating failure
    displayName: getArchives
    queryParameters:
      code?: 
        type: string
        description: the unique product archive name
    responses:
      200:
        body:
          application/json:
            type: RestProductArchive[]
            example: !include ../../../../../../model/src/main/resources/raml/examples/productarchive-list.json
  post:
    description: |
      Create a product archive from the given Json object
     
      @param restProductArchive the Json object to create the product archive from
      @return HTTP status "CREATED" and a response containing a Json object corresponding to the product archive after persistence
              (with ID and version for all contained objects) or HTTP status "BAD_REQUEST", if any of the input data was invalid
    displayName: createArchive
    body:
      application/json:
        type: RestProductArchive
        example: !include ../../../../../../model/src/main/resources/raml/examples/productarchive.json
    responses:
      201:
        body:
          application/json:
            type: RestProductArchive
            example: !include ../../../../../../model/src/main/resources/raml/examples/productarchive.json
  /{id}:
    uriParameters:
      id:
        type: integer
        format: long
    get:
      description: |
        Find the product archive with the given ID
       
        @param id the ID to look for
        @return a response entity corresponding to the found product archive and HTTP status "OK" or an error message and HTTP status
                "NOT_FOUND", if no product archive with the given ID exists
      displayName: getArchiveById
      responses:
        200:
          body:
            application/json:
              type: RestProductArchive
              example: !include ../../../../../../model/src/main/resources/raml/examples/productarchive.json
    patch:
      description: |
        Update the product archive with the given ID with the attribute values of the given Json object.
       
        @param id                 the ID of the product archive to update
        @param restProductArchive a Json object containing the modified (and unmodified) attributes
        @return a response containing HTTP status "OK" and a Json object corresponding to the product archive after modification
                (with ID and version for all contained objects) or HTTP status "NOT_MODIFIED" and the unchanged product archive, if
                no attributes were actually changed, or HTTP status "NOT_FOUND" and an error message, if no product archive with the
                given ID exists
      displayName: modifyArchive
      body:
        application/json:
          type: RestProductArchive
          example: !include ../../../../../../model/src/main/resources/raml/examples/productarchive.json
      responses:
        200:
          body:
            application/json:
              type: RestProductArchive
              example: !include ../../../../../../model/src/main/resources/raml/examples/productarchive.json
        304:
          body:
            application/json:
              type: RestProductArchive
              example: !include ../../../../../../model/src/main/resources/raml/examples/productarchive.json
    delete:
      description: |
        Delete a product archive by ID
       
        @param id the ID of the facility to delete
        @return a response entity with HTTP status "NO_CONTENT", if the deletion was successful, "BAD_REQUEST", if the archive still
                has stored products, TODO: Check dependencies "NOT_FOUND", if the archive did not exist, or "NOT_MODIFIED", if the
                deletion was unsuccessful
      displayName: deleteArchiveById
      responses:
        204: