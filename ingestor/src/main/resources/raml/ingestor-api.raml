#%RAML 1.0
title: prosEO Ingestor REST Services API
version: v0.1
protocols: [ HTTPS ] 
baseUri: /proseo/ingestor/{version}
baseUriParameters:
  port:
    description: The port the application is running on
mediaType: application/json

securitySchemes:
  basicAuth:
    description: Each request must contain the headers necessary for
                 basic authentication
    type: Basic Authentication
    describedBy:
      headers:
        Authorization:
          description: Used to send the Base64-encoded "username:password"
                       credentials
          type: string
      responses:
        401:
          description: |
            Unauthorized. Either the provided username and password
            combination is invalid, or the user is not allowed to access
            the content provided by the requested URL.

types:
  RestConfiguredProcessor: !include ../../../../../model/src/main/resources/raml/types/configuredprocessor.raml
  RestDownloadHistory: !include ../../../../../model/src/main/resources/raml/types/downloadhistory.raml
  RestProduct: !include ../../../../../model/src/main/resources/raml/types/product.raml
  RestProductFile: !include ../../../../../model/src/main/resources/raml/types/productfile.raml
  RestParameter: !include ../../../../../model/src/main/resources/raml/types/parameter.raml
  IngestorProduct: !include ../../../../../interfaces/src/main/resources/raml/types/ingestorproduct.raml

resourceTypes:
  standard:
    get?:
      responses:          
        400:
          description: |
            The request sent to the server contains data which is not as expected e.g. invalid location URI
          headers:
            Warning: !include types/error.raml
        404:
          description: |
            The requested resource was not found                     
          headers:
            Warning: !include types/error.raml
    put?:
      responses:
        400:
          description: |
            The request contained invalid data
          headers:
            Waring: !include types/error.raml      
        404:
          description: |
            The requested resource on which the modification is being attempted was not found              
          headers:
            Warning: !include types/error.raml
    patch?:
      responses:          
        400:
          description: |
            The request contained invalid data
          headers:
            Waring: !include types/error.raml      
        404:
          description: |
            The requested resource on which the modification is being attempted was not found              
          headers:
            Warning: !include types/error.raml
        409:
          description: |
            The resource was modified since retrieval by the client
          headers:
            Waring: !include types/error.raml      
    delete?:
      responses:          
        404:
          description: | 
            The requested resource to delete was not found 
          headers:
            Warning: !include types/error.raml
              
/products:
  type: standard
  description: Methods to manage product metadata in the database
  get:
    description: List of all products by mission, product class, processing mode, file class, quality 
      and time ranges of start time and generation time; the output will be ordered by the columns
        given in orderBy, and the resulting product list will only contain the records in the given range
    displayName: getProducts
    queryParameters:
      mission?: string
      productClass?: string[]
      mode?: string
      fileClass?: string
      quality?: string
      startTimeFrom?: string
      startTimeTo?: string
      genTimeFrom?: string
      genTimeTo?: string
      recordFrom?: integer
      recordTo?: integer
      jobStep?: integer
      orderBy?:
        type: string[]
        description: an array of strings containing a column name and an optional sort direction (ASC/DESC), separated by white space
    responses:
      200:
        body:
          application/json:
            type: RestProduct[]
            example: !include ../../../../../model/src/main/resources/raml/examples/product-list.json
  post:
    description: Create a new product
    displayName: createProduct
    body:
      application/json:
        type: RestProduct
        example: !include ../../../../../model/src/main/resources/raml/examples/product.json
    responses:
      201:
        body:
          application/json:
            type: RestProduct
            example: !include ../../../../../model/src/main/resources/raml/examples/product.json
  /count:
    get:
      description: Number of products available, possibly filtered by mission, product class, processing mode, file class, quality 
          and time ranges of start time and generation time
      displayName: countProducts
      queryParameters:
        mission?: string
        productClass?: string[]
        mode?: string
        fileClass?: string
        quality?: string
        startTimeFrom?: string
        startTimeTo?: string
        genTimeFrom?: string
        genTimeTo?: string
        jobStep?: integer
      responses:
        200:
          body:
            text/plain:
  /{id}:
    uriParameters:
      id:
        type: integer
        format: long
    get:
      description: Get a product by ID
      displayName: getProductById
      responses:
        200:
          body:
            application/json:
              type: RestProduct
              example: !include ../../../../../model/src/main/resources/raml/examples/product.json
    patch:
      description: Update a product by ID
      displayName: modifyProduct
      body:
        application/json:
          type: RestProduct
          example: !include ../../../../../model/src/main/resources/raml/examples/product.json
      responses:
        200:
          body:
            application/json:
              type: RestProduct
              example: !include ../../../../../model/src/main/resources/raml/examples/product.json
    delete:
      description: Delete a product by ID
      responses:
        204:
    /download:
      get:
        description: |
          Get the data file for the product as data stream (optionally range-restricted),
          returns a redirection link to the Storage Manager of a random Processing Facility
        displayName: downloadProductById
        queryParameters:
          fromByte?:
            type: integer
            description: The first byte of the data stream to download (default is file start, i.e. byte 0)
          toByte?:
            type: integer
            description: The last byte of the data stream to download (default is file end, i.e. file size - 1)
        responses:
          307:
      /token:
        get:
          description: Get a JSON Web Token for creating a download link to a Storage Manager
          displayName: getDownloadTokenById
          queryParameters:
            fileName?:
              type: string
              description: The name of the file to download (default primary data file or ZIP file, if available)
          responses:
            200:
              body:
                text/plain:
                  description: The signed JSON Web Token (JWS) as per RFC 7515 and RFC 7519
  /uuid/{uuid}:
    uriParameters:
      uuid:
        type: string
        pattern: ^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$
    get:
      description: Get a product by UUID
      displayName: getProductByUuid
      responses:
        200:
          body:
            application/json:
              type: RestProduct
              example: !include ../../../../../model/src/main/resources/raml/examples/product.json
        
/ingest:
  type: standard
  description: Methods to manage product files in the processing facility and in the database
  /{processingFacility}:
    uriParameters:
      processingFacility:
        type: string
        description: The name of the facility to ingest the products to
    post:
      description: Ingest all given products into the storage manager of the given processing facility
      displayName: ingestProducts
      queryParameters:
        copyFiles?:
          type: boolean
          description: |
            Copy the files to a different storage area
            (default "true"; only applicable if source and target storage type are the same)
      body:
        application/json:
          type: IngestorProduct[]
          example: !include ../../../../../interfaces/src/main/resources/raml/examples/ingestorproduct-list.json
      responses:
        201:
          body:
            application/json:
              type: RestProduct[]
              example: !include ../../../../../model/src/main/resources/raml/examples/product-list.json
    /{productId}:
      uriParameters:
        productId:
          type: integer
          format: long
          description: The ID of the product to ingest product files for
      get:
        description: Get the product file metadata for a product at a given processing facility
        displayName: getProductFile
        responses:
          200:
            body:
              application/json:
                type: RestProductFile
                example: !include ../../../../../model/src/main/resources/raml/examples/productfile.json
      post:
        description: Create the metadata of a new product file for a product at a given processing facility
                     (it is assumed that the files themselves are already pushed to the Storage Manager)
        displayName: ingestProductFile
        body:
          application/json:
            type: RestProductFile
            example: !include ../../../../../model/src/main/resources/raml/examples/productfile.json
        responses:
          201:
            body:
              application/json:
                type: RestProductFile
                example: !include ../../../../../model/src/main/resources/raml/examples/productfile.json
      patch:
        description: Update the product file metadata for a product at a given processing facility
        displayName: modifyProductFile
        body:
          application/json:
            type: RestProductFile
            example: !include ../../../../../model/src/main/resources/raml/examples/productfile.json
        responses:
          200:
            body:
              application/json:
                type: RestProductFile
                example: !include ../../../../../model/src/main/resources/raml/examples/productfile.json
      delete:
        description: Delete a product file for a product from a given processing facility (metadata and actual data file(s))
        displayName: deleteProductFile
        queryParameters:
          eraseFiles?:
            type: boolean
            description: |
              Erase the data file(s) from the storage area (default "true"; for cases where files have been created
              with the 'copyFiles=false' option, and only removal from the metadata database is required)
        responses:
          204:
        