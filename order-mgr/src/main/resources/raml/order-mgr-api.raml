#%RAML 1.0
title: prosEO Order Manager REST Services API
version: v0.1
protocols: [ HTTPS ] 
baseUri: /proseo/order-mgr/{version}
mediaType: application/json

securitySchemes:
  basicAuth:
    description: Each request must contain the headers necessary for
                 basic authentication
    type: Basic Authentication
    describedBy:
      headers:
        Authorization:
          description: Used to send the Base64-encoded "username:password"
                       credentials
          type: string
      responses:
        401:
          description: |
            Unauthorized. Either the provided username and password
            combination is invalid, or the user is not allowed to access
            the content provided by the requested URL.

types:
  RestClassOutputParameter: !include ../../../../../model/src/main/resources/raml/types/classoutputparameter.raml
  RestInputFilter: !include ../../../../../model/src/main/resources/raml/types/inputfilter.raml
  RestInputReference: !include ../../../../../model/src/main/resources/raml/types/inputreference.raml
  RestJob: !include ../../../../../model/src/main/resources/raml/types/job.raml
  RestJobStep: !include ../../../../../model/src/main/resources/raml/types/jobstep.raml
  RestNotificationEndpoint: !include ../../../../../model/src/main/resources/raml/types/notificationendpoint.raml
  RestOrder: !include ../../../../../model/src/main/resources/raml/types/order.raml
  RestOrbitQuery: !include ../../../../../model/src/main/resources/raml/types/orbitquery.raml
  RestParameter: !include ../../../../../model/src/main/resources/raml/types/parameter.raml
  RestMission: !include ../../../../../model/src/main/resources/raml/types/mission.raml
  RestSpacecraft: !include ../../../../../model/src/main/resources/raml/types/spacecraft.raml
  RestPayload: !include ../../../../../model/src/main/resources/raml/types/payload.raml
  RestOrbit: !include ../../../../../model/src/main/resources/raml/types/orbit.raml


resourceTypes:
  standard:
    get?:
      responses:
        403:
          description: A cross-mission data access was attempted.
          headers:
            Warning: !include types/error.raml
        404:
          description: The requested resource was not found.
          headers:
            Warning: !include types/error.raml
    put?:
      responses:
        400:
          description: The request sent to the server contains data which is not as expected e.g. invalid location URI
          headers:
            Warning: !include types/error.raml
        403:
          description: A cross-mission data access was attempted.          
          headers:
            Warning: !include types/error.raml
        404:
          description: The requested resource was not found.
          headers:
            Warning: !include types/error.raml
    post?:
      responses:
        400:
          description: The request sent to the server contains data which is not as expected e.g. invalid location URI
          headers:
            Warning: !include types/error.raml
        403:
          description: A cross-mission data access was attempted.          
          headers:
            Warning: !include types/error.raml  
    patch?:
      responses:
        400:
          description: The request sent to the server contains data which is not as expected e.g. invalid location URI
          headers:
            Warning: !include types/error.raml
        403:
          description: A cross-mission data access was attempted.
          headers:
            Warning: !include types/error.raml
        404:
          description: The requested resource was not found                     
          headers:
            Warning: !include types/error.raml
        409:
          description: A concurrent modification was attempted.
          headers:
            Warning: !include types/error.raml
    delete?:
      responses:
        304:
          description: The resource could not be deleted.
          headers:
            Warning: !include types/error.raml
        403:
          description: A cross-mission data access was attempted.          
          headers:
            Warning: !include types/error.raml
        404:
          description: The requested resource to delete was not found.
          headers:
            Warning: !include types/error.raml
              
/orders:
  type: standard
  get:
    description: |
      List of all orders filtered by mission, identifier, productClasses, starttime range
    displayName: getOrders
    queryParameters:
      mission?: 
        description: the mission code
        type: string
      identifier?: 
        description: the unique order identifier string
        type: string
      productClasses?: 
        description: an array of product types
        type: string[]
      startTimeFrom?:
        description: earliest sensing start time
        type: datetime-only
      startTimeTo?:
        description: latest sensing start time
        type: datetime-only
      executionTimeFrom?: 
        description: earliest order execution time
        type: datetime-only
      executionTimeTo?:
        description: latest order execution time
        type: datetime-only
    responses:
      200:
        body:
          application/json:
            type: RestOrder[]
            example: !include ../../../../../model/src/main/resources/raml/examples/order-list.json
  post:
    description: |
      Create an order from the given JSON object
    displayName: createOrder
    body:
      application/json:
        type: RestOrder
        example: !include ../../../../../model/src/main/resources/raml/examples/order.json
    responses:
      201:
        body:
          application/json:
            type: RestOrder
            example: !include ../../../../../model/src/main/resources/raml/examples/order.json
  /count:
    type: standard
    get:
      description: |
        Count orders filtered by mission, identifier and id not equal nid.
      displayName: countOrders
      queryParameters:
        mission?: 
          description: the mission code
          type: string
        identifier?: 
          description: the unique order identifier string
          type: string
        nid?: 
          description: the ids of orbit(s) found has to be unequal to nid
          type: integer
      responses:
        200:
          body:
            text/plain:
  /countselect:
    get:
      description: |
        Calculate the amount of orders satisfying the selection parameters. Mission code is mandatory.
      displayName: countSelectOrders
      queryParameters:
        mission?: 
          description: the mission code
          type: string
        identifier?: 
          description: the unique order identifier string
          type: string
        state?: 
          description: an array of order states
          type: string[]
        productClass?: 
          description: an array of product types
          type: string[]
        startTime?: 
          description: earliest sensing start time
          type: string
        stopTime?: 
          description: latest sensing start time
          type: string
        recordFrom?: 
          description: first record of filtered and ordered result to return
          type: integer
        recordTo?: 
          description: last record of filtered and ordered result to return
          type: integer
        orderBy?: 
          description: an array of strings containing a column name and an optional sort direction (ASC/DESC)
          type: string[]
      responses:
        200:
          body:
            text/plain:
  /select:
    get:
      description: |
        Retrieve a list of orders satisfying the selection parameters
      displayName: getAndSelectOrders
      queryParameters:
        mission?: 
          description: the mission code
          type: string
        identifier?: 
          description: the unique order identifier string
          type: string
        state?: 
          description: an array of order states
          type: string[]
        productClass?: 
          description: an array of product types
          type: string[]
        startTime?: 
          description: earliest sensing start time
          type: string
        stopTime?: 
          description: latest sensing start time
          type: string
        recordFrom?: 
          description: first record of filtered and ordered result to return
          type: integer
        recordTo?: 
          description: last record of filtered and ordered result to return
          type: integer
        orderBy?: 
          description: an array of strings containing a column name and an optional sort direction (ASC/DESC)
          type: string[]
      responses:
        200:
          body:
            application/json:
              type: RestOrder[]
              example: !include ../../../../../model/src/main/resources/raml/examples/order-list.json
  /{id}:
    uriParameters:
      id:
        type: integer
        format: long
    get:
      description: |
        Find the order with the given ID
      displayName: getOrderById
      responses:
        200:
          body:
            application/json:
              type: RestOrder
              example: !include ../../../../../model/src/main/resources/raml/examples/order.json
        404:
          description: The requested resource was not found                     
          headers:
            Warning: !include types/error.raml
    patch:
      description: |
        Update the order with the given ID with the attribute values of the given JSON object.
      displayName: modifyOrder
      body:
        application/json:
          type: RestOrder
          example: !include ../../../../../model/src/main/resources/raml/examples/order.json
      responses:
        200:
          body:
            application/json:
              type: RestOrder
              example: !include ../../../../../model/src/main/resources/raml/examples/order.json
        304:
          description: The resource was not modified.
          headers:
            Warning: !include types/error.raml
    delete:
      description: |
        Delete an order by ID
      displayName: deleteOrderById
      responses:
        204:
        
/orderjobs:
  type: standard
  get:
    description: |
      Retrieves production planner jobs, optionally filtered by job state and/or order ID.
    displayName: getJobs
    queryParameters:
      orderid?:
        type: integer
        format: long
        description: The order ID to filter by.
      recordFrom?: 
        description: The first record of the filtered and ordered result to return.
        type: integer
        format: int32
      recordTo?:
        description: The last record of the filtered and ordered result to return.
        type: integer
        format: int32
      logs?: 
        description: Whether or not logs are included in the REST job step.
        type: boolean
      state?: 
        description: The job states to filter by.
        type: string[]
      orderBy?:
        type: string[]
        description: An array of strings containing a column name and an optional sort direction (ASC/DESC), separated by whitespace.
    responses:
      200:
        body:
          application/json:
            type: RestJob[]
            example: !include ../../../../../model/src/main/resources/raml/examples/job-list.json  
  /count:
    type: standard
    get:
      description: |
        Retrieves the number of production planner jobs based on the specified states and order ID.
      displayName: countJobs
      queryParameters:
        state?: 
          description: The permitted job states.
          type: string[]
        orderid?:
          type: integer
          format: long
          description: The order ID of the jobs.
      responses:
        200:
          body:
            text/plain:
  /index:
    type: standard
    get:
      description: |
        Retrieves the index of a job in an ordered list of all jobs of an order.
      displayName: indexOfJob
      queryParameters:
        orderid: 
          type: integer
          format: long
          description: The persistent id of the processing order.
        jobid?:
          type: integer
          format: long
          description: The persistent id of the job.
        jobstepid?: 
          type: integer
          format: long
          description: The persistent id of the job step.
        state?:
          type: string[]
          description: The permitted job states (COMPLETED, NON-COMPLETED).
        orderBy?:
          type: string[]
          description: An array of strings containing a column name and an optional sort direction (ASC/DESC), separated by whitespace.
      responses:
        200:
          body:
            text/plain:

/orderjobsteps:
  type: standard
  get:
    description: |
      Get production planner job steps by status, mission, and latest of size "last".
    displayName: getJobSteps
    queryParameters:
      status?:
        description: The status of the job steps to retrieve
        type: string
        enum: [ INITIAL, WAITING_INPUT, READY, RUNNING, COMPLETED, FAILED, CLOSED, NONE ]
      mission?: 
        description: The mission for which to retrieve the job steps
        type: string
      last?: 
        description: The number of latest job steps to retrieve
        type: integer
    responses:
      200:
        body:
          application/json:
            type: RestJobStep[]
            example: !include ../../../../../model/src/main/resources/raml/examples/jobstep-list.json
  /{name}:
    get:
      description: |
        Get a production planner job step identified by name or id.
      displayName: getJobStep
      responses:
        200:
          body:
            application/json:
              type: RestJobStep
              example: !include ../../../../../model/src/main/resources/raml/examples/jobstep.json
        404:
          description: The requested resource was not found                     
          headers:
            Warning: !include types/error.raml
        
/orderjobstepsofstates:
  type: standard
  get:
    description: |
      Get production planner job steps by status, mission, and latest of size "last".
    displayName: getJobStepsOfStates
    queryParameters:
      status:
        description: The status of the job steps to retrieve
        type: string[]
      mission: 
        description: The mission for which to retrieve the job steps
        type: string
      last: 
        description: The number of latest job steps to retrieve
        type: integer
    responses:
      200:
        body:
          application/json:
            type: RestJobStep[]
            example: !include ../../../../../model/src/main/resources/raml/examples/jobstep-list.json
            
/missions:
  type: standard
  get:
    description: |
      Retrieves a list of all missions or a mission with a specific code.
    displayName: getMissions
    queryParameters:
      mission?: 
        description: The code of the mission to retrieve.
        type: string
    responses:
      200:
        body:
          application/json:
            type: RestMission[]
            example: !include ../../../../../model/src/main/resources/raml/examples/mission-list.json
  post:
    description: |
      Creates a new mission with the provided data.
    displayName: createMission
    body:
      application/json:
        type: RestMission
        example: !include ../../../../../model/src/main/resources/raml/examples/mission.json
    responses:
      201:
        body:
          application/json:
            type: RestMission
            example: !include ../../../../../model/src/main/resources/raml/examples/mission.json
  /{id}:
    uriParameters:
      id:
        type: integer
        format: long
    get:
      description: |
        Retrieves the mission with the specified ID.
      displayName: getMissionById
      responses:
        200:
          body:
            application/json:
              type: RestMission
              example: !include ../../../../../model/src/main/resources/raml/examples/mission.json
        404:
          description: The requested resource was not found                     
          headers:
            Warning: !include types/error.raml
    patch:
      description: |
        Updates the mission with the specified ID using the attribute values of the given JSON object.
      displayName: modifyMission
      body:
        application/json:
          type: RestMission
          example: !include ../../../../../model/src/main/resources/raml/examples/mission.json
      responses:
        200:
          body:
            application/json:
              type: RestMission
              example: !include ../../../../../model/src/main/resources/raml/examples/mission.json
        304:
          description: The resource was not modified.
          headers:
            Warning: !include types/error.raml
    delete:
      description: |
        Delete a mission by ID.
      displayName: deleteMissionById
      queryParameters:
        force?:
          type: boolean
          default: false
          description: Also delete all configured items for this mission, but no products
        delete-products?:
          type: boolean
          default: false
          description: Also delete all products for this mission (requires "force")
      responses:
        204:

/orbits:
  type: standard
  get:
    description: |
      Retrieves a list of all orbits filtered by spacecraft code, orbit number range, and start time range.
    displayName: getOrbits
    queryParameters:
      spacecraftCode: 
        type: string
        description: The spacecraft code to filter by.
      orbitNumberFrom?: 
        description: The minimum orbit number requested.
        type: integer
      orbitNumberTo?: 
        description: The maximum orbit number requested.
        type: integer
      startTimeFrom?: 
        description: The earliest sensing start time requested.
        type: string
      startTimeTo?: 
        description: The latest sensing start time requested.
        type: string
      recordFrom?: 
        description: The first record of the filtered and ordered result to return.
        type: integer
        format: int32
      recordTo?:
        description: The last record of the filtered and ordered result to return.
        type: integer
        format: int32
      orderBy?:
        type: string[]
        description: An array of strings containing a column name and an optional sort direction (ASC/DESC), separated by white space.
    responses:
      200:
        body:
          application/json:
            type: RestOrbit[]
            example: !include ../../../../../model/src/main/resources/raml/examples/orbit-list.json
  post:
    description: |
      Creates one or more orbits based on the provided JSON objects.
    displayName: createOrbits
    body:
      application/json:
        type: RestOrbit[]
        example: !include ../../../../../model/src/main/resources/raml/examples/orbit-list.json
    responses:
      201:
        body:
          application/json:
            type: RestOrbit[]
            example: !include ../../../../../model/src/main/resources/raml/examples/orbit-list.json
  /count:
    type: standard
    get:
      description: |
        Retrieves the number of orbits matching the specified search criteria.
      displayName: countOrbits
      queryParameters:
        spacecraftCode: 
          description: The spacecraft code to filter by.
          type: string
        orbitNumberFrom?: 
          description: The minimum orbit number requested.
          type: integer
        orbitNumberTo?: 
          description: The maximum orbit number requested.
          type: integer
        starttimefrom?: 
          description: The earliest sensing start time requested.
          type: string
        starttimeto?: 
          description: The latest sensing start time requested.
          type: string
      responses:
        200:
          body:
            text/plain:
  /{id}:
    uriParameters:
      id:
        type: integer
        format: long
    get:
      description: |
        Retrieves the orbit with the given ID.
      displayName: getOrbitById
      responses:
        200:
          body:
            application/json:
              type: RestOrbit
              example: !include ../../../../../model/src/main/resources/raml/examples/orbit.json
        404:
          description: The requested resource was not found                     
          headers:
            Warning: !include types/error.raml
    patch:
      description: |
        Updates the orbit with the given ID using the attribute values from the provided JSON object.
      displayName: modifyOrbit
      body:
        application/json:
          type: RestOrbit
          example: !include ../../../../../model/src/main/resources/raml/examples/orbit.json
      responses:
        200:
          body:
            application/json:
              type: RestOrbit
              example: !include ../../../../../model/src/main/resources/raml/examples/orbit.json
        304:
          description: The resource was not modified.
          headers:
            Warning: !include types/error.raml
    delete:
      description: |
        Deletes the orbit with the given ID.
      displayName: deleteOrbitById
      responses:
        204: