#%RAML 1.0
title: prosEO Production Planner REST Services API
version: v0.1
protocols: [ HTTP, HTTPS ] 
baseUri: /proseo/planner/{version}
mediaType: application/json

types:
  RestJob: !include ../../../../../model/src/main/resources/raml/types/job.raml
  RestJobStep: !include ../../../../../model/src/main/resources/raml/types/jobstep.raml
  RestOrbit: !include ../../../../../model/src/main/resources/raml/types/orbit.raml
  RestOrder: !include ../../../../../model/src/main/resources/raml/types/order.raml
  RestParameter: !include ../../../../../model/src/main/resources/raml/types/parameter.raml
  RestOrbitQuery: !include ../../../../../model/src/main/resources/raml/types/orbitquery.raml
  RestProcessingFacility: !include ../../../../../model/src/main/resources/raml/types/processingfacility.raml
  PlannerPod: !include ../../../../../interfaces/src/main/resources/raml/types/planner-pod.raml

resourceTypes:
  standard:
    get?:
      responses:
        400:
          description: |
            The request sent to the server contains data which is not as expected e.g. invalid location URI
          headers:
            Warning: !include types/error.raml
        404:
          description: |
            The requested resource was not found                     
          headers:
            Warning: !include types/error.raml
    put?:
      responses:          
        404:
          description: |
            The requested resource on which the modification is being attempted was not found              
          headers:
            Warning: !include types/error.raml
    delete?:
      responses:          
        404:
          description: | 
            The requested resource to delete was not found 
          headers:
            Warning: !include types/error.raml
/orders:
  type: standard
  get:
    description: Get all processing orders
    displayName: getOrders
    responses:
      200:
        body:
          application/json:
            type: RestOrder[]
            example: !include ../../../../../model/src/main/resources/raml/examples/order-list.json
  /plan:
    /{id}:
      put:
        description: Plan processing order of id on processing facility
        displayName: planOrder
        queryParameters:
          facility: string
        responses:
          200:
            body:
              application/json:
                type: RestOrder
                example: !include ../../../../../model/src/main/resources/raml/examples/order.json
  /release:
    /{id}:
      patch:
        description: Release processing order of id 
        displayName: releaseOrder
        responses:
          200:
            body:
              application/json:
                type: RestOrder
                example: !include ../../../../../model/src/main/resources/raml/examples/order.json
  /cancel:
    /{id}:
      patch:
        description: Cancel processing order of id 
        displayName: cancelOrder
        responses:
          200:
            body:
              application/json:
                type: RestOrder
                example: !include ../../../../../model/src/main/resources/raml/examples/order.json
  /suspend:
    /{id}:
      patch:
        description: Suspend processing order of id 
        displayName: suspendOrder
        responses:
          200:
            body:
              application/json:
                type: RestOrder
                example: !include ../../../../../model/src/main/resources/raml/examples/order.json
    
/jobs:
  type: standard
  get:
    description: Get production planner jobs by state
    displayName: getJobs
    queryParameters:
      state?: string
    responses:
      200:
        body:
          application/json:
            type: RestJob[]
            example: !include ../../../../../model/src/main/resources/raml/examples/job-list.json
  /{name}:
    get:
      description: Get production planner job
      displayName: getJob
      responses:
        200:
          body:
            application/json:
              type: RestJob
              example: !include ../../../../../model/src/main/resources/raml/examples/job.json
    post:
      description: Create production planner job
      displayName: createJob
      queryParameters:
        facility?:
          type: string
      responses:
        200:
          body:
            application/json:
              type: RestJob
              example: !include ../../../../../model/src/main/resources/raml/examples/job.json
    delete:
      description: Delete production planner job
      displayName: deleteJob
      responses:
        200:
          body:
            application/json:
              type: RestJob
              example: !include ../../../../../model/src/main/resources/raml/examples/job.json
  /resume:
    /{id}:
      patch:
        description: Resume job of id 
        displayName: resumeJob
        responses:
          200:
            body:
              application/json:
                type: RestJob
                example: !include ../../../../../model/src/main/resources/raml/examples/job.json
  /cancel:
    /{id}:
      patch:
        description: Cancel job of id 
        displayName: cancelJob
        responses:
          200:
            body:
              application/json:
                type: RestJob
                example: !include ../../../../../model/src/main/resources/raml/examples/job.json
  /suspend:
    /{id}:
      get:
        description: Suspend job of id 
        displayName: suspendJob
        responses:
          200:
            body:
              application/json:
                type: RestJob
                example: !include ../../../../../model/src/main/resources/raml/examples/job.json

/jobsteps:
  type: standard
  get:
    description: Get production planner jobsteps
    displayName: getJobSteps
    queryParameters:
      status?:
        type: string
        enum: [ INITIAL, WAITING_INPUT, READY, RUNNING, COMPLETED, FAILED, NONE ]
    responses:
      200:
        body:
          application/json:
            type: RestJobStep[]
            example: !include ../../../../../model/src/main/resources/raml/examples/jobstep-list.json
  /{name}:
    get:
      description: Get production planner jobstep
      displayName: getJobStep
      responses:
        200:
          body:
            application/json:
              type: RestJobStep
              example: !include ../../../../../model/src/main/resources/raml/examples/jobstep.json
    post:
      description: Create production planner jobstep
      displayName: createJobStep
      responses:
        200:
          body:
            application/json:
              type: RestJobStep
              example: !include ../../../../../model/src/main/resources/raml/examples/jobstep.json
    delete:
      description: Delete production planner jobstep
      displayName: deleteJobStep
      responses:
        200:
          body:
            application/json:
              type: RestJobStep
              example: !include ../../../../../model/src/main/resources/raml/examples/jobstep.json
  /resume:
    /{id}:
      patch:
        description: Resume job step of id 
        displayName: resumeJobStep
        responses:
          200:
            body:
              application/json:
                type: RestJobStep
                example: !include ../../../../../model/src/main/resources/raml/examples/jobstep.json
  /cancel:
    /{id}:
      patch:
        description: Cancel job step of id 
        displayName: cancelJobStep
        responses:
          200:
            body:
              application/json:
                type: RestJobStep
                example: !include ../../../../../model/src/main/resources/raml/examples/jobstep.json
  /suspend:
    /{id}:
      patch:
        description: Suspend job step of id 
        displayName: suspendJobStep
        responses:
          200:
            body:
              application/json:
                type: RestJobStep
                example: !include ../../../../../model/src/main/resources/raml/examples/jobstep.json
/processingfacilities:
  type: standard
  get:
    description: Update and get running and connected processing facilities
    responses:
      200:
        body:
          application/json:
            type: RestProcessingFacility[]
            example: !include ../../../../../model/src/main/resources/raml/examples/processingfacility-list.json
  /{name}:
    get:
      description: Get production planner processingfacilitiy by name 
      responses:
        200:
          body:
            application/json:
              type: RestProcessingFacility
              example: !include ../../../../../model/src/main/resources/raml/examples/processingfacility.json
    /pod:
      /{podname}:
        get:
          description: Get jobstep/pod for test purpose
          responses:
            200:
              body:
                application/json:
                  type: PlannerPod
        post:
          description: Create jobstep/pod for test purpose
          queryParameters:
            stdoutLogLevel?:
              type: string
              enum: [ DEBUG, INFO, PROGRESS, WARNING, ERROR ]
            stderrLogLevel?:
              type: string
              enum: [ DEBUG, INFO, PROGRESS, WARNING, ERROR ]
          responses:
            201:
              body:
                application/json:
                  type: RestJobStep
    /pods:
      get: 
        description: Get pods on processing facility
        responses:
          200:
            body:
              application/json:
                type: PlannerPod[]
      /{status}:
        get: 
          description: Get pods on processing facility
          responses:
            200:
              body:
                application/json:
                  type: PlannerPod[]
        delete:
          description: Delete pods on processing facility
          responses:
            200:
    /finish:
      /{podname}:
        patch:
          description: Pod of name has finished with state
          queryParameters:
            status: string
          responses:
            200:
              body:
                application/json:
                  type: PlannerPod
/product:
  /{productid}:
    get:
      description: Product created and available, sent by prosEO Ingestor
      responses:
        200:
        
                