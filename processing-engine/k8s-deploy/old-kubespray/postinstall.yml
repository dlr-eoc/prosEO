---
- hosts: localhost
  gather_facts: false
  become: no
  tasks:
    - name: "Check ansible version >=2.7.8"
      assert:
        msg: "Ansible must be v2.7.8 or higher"
        that:
          - ansible_version.string is version("2.7.8", ">=")
      tags:
        - check
  vars:
    ansible_connection: local
# fetch admin.conf from first master
- hosts: kube-master[0]
  tasks:
    - name: fetch admin.conf from first master
      fetch:
        src: /etc/kubernetes/admin.conf
        dest: /tmp/admin.conf.local
        flat: yes
# provision our gateway
- hosts: bastion[0]
  gather_facts: False
  tasks:
    #SELINUX OFF
    - name: disable selinux
      selinux: state=disabled
    #EPEL
    - name: install prerequisites
      yum: name=epel-release
    #KUBECTL
    - name: kube-repo
      blockinfile:
        dest: /etc/yum.repos.d/kubernetes.repo
        create: yes
        block: |
          [kubernetes]
          name=Kubernetes
          baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
          enabled=1
          gpgcheck=1
          repo_gpgcheck=1
          gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
    - name: install kubectl & other tools
      yum: name=htop,git,wget,python-pip,nginx,certbot,python2-certbot-nginx,kubectl,httpd-tools
    #SYSTEMD DAEMON reload
    - name: daemon-reload
      systemd:
        daemon_reload: yes
    #FIREWALLD OFF
    - name: disable firewalld
      service: name=firewalld state=stopped enabled=no
    #KUBECTL-PROXY
    - name: run kubectl proxy as systemd
      blockinfile:
        dest: /etc/systemd/system/kubectl-proxy.service
        create: yes
        block: |
          [Unit]
          Description=kubectl proxy 8001
          After=network.target
          [Service]
          User=root
          ExecStart=/bin/bash -c "/usr/bin/kubectl proxy --address=0.0.0.0 --port=8001"
          StartLimitInterval=0
          RestartSec=10
          Restart=always
          [Install]
          WantedBy=multi-user.target
    - name: create .kube dir (1)
      file: name=/root/.kube state=directory
    - name: create .kube dir (2)
      file: name=/home/linux/.kube state=directory
    #KUBE-CFG
    - name: copy kube.config (1)
      copy:
        src: "/tmp/admin.conf.local"
        dest: "/root/.kube/config"
        force: yes
        owner: root
        group: root
    - name: copy kube.config (2)
      copy:
        src: "/tmp/admin.conf.local"
        dest: "/home/linux/.kube/config"
        force: yes
        owner: linux
        group: linux
    #CERTBOT
    - name: letsencrypt cert renewal service
      blockinfile:
        dest: /etc/systemd/system/certbot-renewal.service
        create: yes
        block: |
           [Unit]
           Description=Certbot Renewal
           After=nginx.service
           [Service]
           ExecStart=/usr/bin/certbot renew --post-hook "systemctl restart nginx"
    - name: letsencrypt cert renewal timer
      blockinfile:
        dest: /etc/systemd/system/certbot-renewal.timer
        create: yes
        block: |
           [Unit]
           Description=Timer for Certbot Renewal
           [Timer]
           OnBootSec=300
           OnUnitActiveSec=1d
           [Install]
           WantedBy=multi-user.target
    #SYSTEMD DAEMON reload
    - name: daemon-reload
      systemd:
        daemon_reload: yes
    #ACTIVATE timer
    - name: start cert-renewal systemd
      service: name=certbot-renewal.timer state=restarted enabled=yes
    #ACTIVATE kubectl-proxy
    - name: start kubectl-proxy
      service: name=kubectl-proxy.service state=restarted enabled=yes
    #MOTD
    - name: motd-cleanup
      file: name=/etc/motd state=absent
    - name: set nice motd welcome msg
      blockinfile:
        dest: /etc/motd
        create: yes
        block: |
         ..   ___   ____    prosEO-k8s-gateway
         ..  / _ \ / __ \   centos7.6 - kubectl - nginx
         .. /  __// /_/ /   provisioned for you on: {{ lookup('pipe','date') }}
         .. \___/ \____/    github.com/dlr-eoc/proseo
        marker: " "
    #PORT 80->443
    - name: set port 80 ssl forwarding
      blockinfile:
        dest: /etc/nginx/conf.d/default.conf
        create: yes
        block: |
          server {
            listen 80 default_server;
            listen [::]:80 default_server;
            server_name _;
            return 301 https://$host$request_uri;
          }
    # MANUAL certbot STEPs before first run required...
    # https://certbot.eff.org/lets-encrypt/centosrhel7-nginx
    - name: update ssl reverse proxy cfg
      blockinfile:
        dest: /etc/nginx/conf.d/ssl.conf
        create: yes
        block: |
           server {
           listen 443 http2 ssl;
           listen [::]:443 http2 ssl;
           ssl on;
           server_name proseo-k8s-gate.de;
           ssl_certificate /etc/letsencrypt/live/proseo-k8s-gate.de/fullchain.pem;
           ssl_certificate_key /etc/letsencrypt/live/proseo-k8s-gate.de/privkey.pem;
           ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
           include /etc/letsencrypt/options-ssl-nginx.conf;
           resolver 8.8.8.8 8.8.4.4 valid=300s;
           resolver_timeout 5s;
           # Disable preloading HSTS for now.  You can use the commented out header line that includes
           # the "preload" directive if you understand the implications.
           # add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
           add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
           add_header X-Frame-Options DENY;
           add_header X-Content-Type-Options nosniff;
           root /usr/share/nginx/html;
           #MANUAL STEP: sudo htpasswd -c /etc/nginx/.htpasswd user1
           location / {
              proxy_pass             http://127.0.0.1:8001/;
              limit_except GET HEAD {
                auth_basic           'prosEO dev area';
                auth_basic_user_file /etc/nginx/.htpasswd;
              }
           }
           error_page 404 /404.html;
             location = /404.html {
           }
           error_page 403 /403.html;
             location = /403.html {
           }
           error_page 500 502 503 504 /50x.html;
             location = /50x.html {
           }
           }
    - name: restart nginx
      service: name=nginx state=restarted enabled=yes