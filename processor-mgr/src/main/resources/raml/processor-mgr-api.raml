#%RAML 1.0
title: prosEO Processor Manager REST Services API
version: v0.1
protocols: [ HTTPS ] 
baseUri: /proseo/processor-mgr/{version}
mediaType: application/json

securitySchemes:
  basicAuth:
    description: Each request must contain the headers necessary for basic authentication
    type: Basic Authentication
    describedBy:
      headers:
        Authorization:
          description: Used to send the Base64-encoded "username:password"
                       credentials
          type: string
      responses:
        401:
          description: |
            Unauthorized. Either the provided username and password
            combination is invalid, or the user is not allowed to access
            the content provided by the requested URL.

types:
  RestParameter: !include ../../../../../model/src/main/resources/raml/types/parameter.raml
  RestStringParameter: !include ../../../../../model/src/main/resources/raml/types/stringparameter.raml
  RestProcessor: !include ../../../../../model/src/main/resources/raml/types/processor.raml
  RestProcessorClass: !include ../../../../../model/src/main/resources/raml/types/processorclass.raml
  RestTask: !include ../../../../../model/src/main/resources/raml/types/task.raml
  RestConfiguration: !include ../../../../../model/src/main/resources/raml/types/configuration.raml
  RestConfigurationFile: !include ../../../../../model/src/main/resources/raml/types/configurationfile.raml
  RestConfigurationInputFile: !include ../../../../../model/src/main/resources/raml/types/configurationinputfile.raml
  RestConfiguredProcessor: !include ../../../../../model/src/main/resources/raml/types/configuredprocessor.raml
  RestWorkflow: !include ../../../../../model/src/main/resources/raml/types/workflow.raml
  RestWorkflowOption: !include ../../../../../model/src/main/resources/raml/types/workflowoption.raml
  RestClassOutputParameter: !include ../../../../../model/src/main/resources/raml/types/classoutputparameter.raml
  RestInputFilter: !include ../../../../../model/src/main/resources/raml/types/inputfilter.raml
  
resourceTypes:
  standard:
    get?:
      responses:
        403:
          description: A cross-mission data access was attempted.
          headers:
            Warning: !include types/error.raml
        404:
          description: The requested resource was not found.
          headers:
            Warning: !include types/error.raml
    put?:
      responses:
        400:
          description: The request sent to the server contains data which is not as expected e.g. invalid location URI
          headers:
            Warning: !include types/error.raml
        403:
          description: A cross-mission data access was attempted.          
          headers:
            Warning: !include types/error.raml
        404:
          description: The requested resource was not found.
          headers:
            Warning: !include types/error.raml
    post?:
      responses:
        400:
          description: The request sent to the server contains data which is not as expected e.g. invalid location URI
          headers:
            Warning: !include types/error.raml
        403:
          description: A cross-mission data access was attempted.          
          headers:
            Warning: !include types/error.raml  
    patch?:
      responses:
        400:
          description: The request sent to the server contains data which is not as expected e.g. invalid location URI
          headers:
            Warning: !include types/error.raml
        403:
          description: A cross-mission data access was attempted.
          headers:
            Warning: !include types/error.raml
        404:
          description: The requested resource was not found                     
          headers:
            Warning: !include types/error.raml
        409:
          description: A concurrent modification was attempted.
          headers:
            Warning: !include types/error.raml
    delete?:
      responses:
        304:
          description: The resource could not be deleted.
          headers:
            Warning: !include types/error.raml
        403:
          description: A cross-mission data access was attempted.          
          headers:
            Warning: !include types/error.raml
        404:
          description: The requested resource to delete was not found.
          headers:
            Warning: !include types/error.raml
              
/processorclasses:
  type: standard
  get:
    description: |
      Get processor classes by mission and name
    displayName: getProcessorClasses
    queryParameters:
      mission?: 
        type: string
        description: the mission code
      id?:
        type: integer
        format: long
      productClass?:
        type: string[]
        description: an array of product class types
      processorName?: 
        type: string
        description: the processor name
      recordFrom?: 
        type: integer
        format: int32
        description: first record of filtered and ordered result to return
      recordTo?:
        type: integer
        format: int32
        description: last record of filtered and ordered result to return
      orderBy?:
        type: string[]
        description: an array of strings containing a column name and an optional sort direction (ASC/DESC), separated by white space
    responses:
      200:
        body:
          application/json:
            type: RestProcessorClass[]
            example: !include ../../../../../model/src/main/resources/raml/examples/processorclass-list.json
  post:
    description: |
      Create a new processor class
    displayName: createProcessorClass
    body:
      application/json:
        type: RestProcessorClass
        example: !include ../../../../../model/src/main/resources/raml/examples/processorclass.json
    responses:
      201:
        body:
          application/json:
            type: RestProcessorClass
            example: !include ../../../../../model/src/main/resources/raml/examples/processorclass.json
  /count:
    get:
      description: |
        Count the processor classes matching the specified mission and processor name.
      displayName: countProcessorClasses
      queryParameters:
        mission?: 
          type: string
          description: the mission code
        id?:
          type: integer
          format: long
        productClass?:
          type: string[]
          description: an array of product class types
        processorName?: 
          type: string
          description: the processor name
      responses:
        200:
          body:
            text/plain:
  /{id}:
    uriParameters:
      id:
        type: integer
        format: long
    get:
      description: |
        Get a processor class by ID
      displayName: getProcessorClassById
      responses:
        200:
          body:
            application/json:
              type: RestProcessorClass
              example: !include ../../../../../model/src/main/resources/raml/examples/processorclass.json
        400:
          description: The request sent to the server contains data which is not as expected e.g. invalid location URI
          headers:
            Warning: !include types/error.raml
    patch:
      description: |
        Update a processor class by ID
      displayName: modifyProcessorClass
      body:
        application/json:
          type: RestProcessorClass
          example: !include ../../../../../model/src/main/resources/raml/examples/processorclass.json
      responses:
        200:
          body:
            application/json:
              type: RestProcessorClass
              example: !include ../../../../../model/src/main/resources/raml/examples/processorclass.json
        304:
          body:
            application/json:
              type: RestProcessorClass
              example: !include ../../../../../model/src/main/resources/raml/examples/processorclass.json
    delete:
      description: |
        Delete a processor class by ID
      displayName: deleteProcessorClassById
      responses:
        204:
              
/processors:
  type: standard
  get:
    description: |
      Get processors by mission, name and version (user-defined version, not database version)
    displayName: getProcessors
    queryParameters:
      mission?: 
        type: string
        description: the mission code
      id?:
        type: integer
        format: long
      processorName?: 
        type: string
        description: the name of the processor (class)
      processorVersion?: 
        type: string
        description: the processor version
      recordFrom?: 
        type: integer
        format: int32
        description: first record of filtered and ordered result to return
      recordTo?:
        type: integer
        format: int32
        description: last record of filtered and ordered result to return
      orderBy?:
        type: string[]
        description: an array of strings containing a column name and an optional sort direction (ASC/DESC), separated by white space
    responses:
      200:
        body:
          application/json:
            type: RestProcessor[]
            example: !include ../../../../../model/src/main/resources/raml/examples/processor-list.json
  post:
    description: |
      Create a new processor (version)
    displayName: createProcessor
    body:
      application/json:
        type: RestProcessor
        example: !include ../../../../../model/src/main/resources/raml/examples/processor.json
    responses:
      201:
        body:
          application/json:
            type: RestProcessor
            example: !include ../../../../../model/src/main/resources/raml/examples/processor.json
  /count:
    get:
      description: |
        Count the processors matching the specified mission, processor name, and processor version.
      displayName: countProcessors
      queryParameters:
        mission?: 
          type: string
          description: the mission code
        id?:
          type: integer
          format: long
        processorName?: 
          type: string
          description: the name of the processor (class)
        processorVersion?: 
          type: string
          description: the processor version
      responses:
        200:
          body:
            text/plain:
  /{id}:
    uriParameters:
      id:
        type: integer
        format: long
    get:
      description: |
        Get a processor by ID
      displayName: getProcessorById
      responses:
        200:
          body:
            application/json:
              type: RestProcessor
              example: !include ../../../../../model/src/main/resources/raml/examples/processor.json
        404:
          description: The requested resource was not found                     
          headers:
            Warning: !include types/error.raml
    patch:
      description: |
        Update a processor by ID
      displayName: modifyProcessor
      body:
        application/json:
          type: RestProcessor
          example: !include ../../../../../model/src/main/resources/raml/examples/processor.json
      responses:
        200:
          body:
            application/json:
              type: RestProcessor
              example: !include ../../../../../model/src/main/resources/raml/examples/processor.json
        304:
          body:
            application/json:
              type: RestProcessor
              example: !include ../../../../../model/src/main/resources/raml/examples/processor.json
    delete:
      description: |
        Delete a processor by ID
      displayName: deleteProcessorById
      responses:
        204: 

/configurations:
  type: standard
  get:
    description: |
      Get configurations by mission, processor name and configuration version
    displayName: getConfigurations
    queryParameters:
      mission?: 
        type: string
        description: the mission code
      id?:
        type: integer
        format: long
      processorName?: 
        type: string[]
        description: an array of processor names the configurations belongs to
      configurationVersion?: 
        type: string
        description: the configuration version
      productQuality?: 
        type: string[]
        description: an array of product qualities
      processingMode?: 
        type: string[]
        description: an array of processing modes
      recordFrom?: 
        type: integer
        format: int32
        description: first record of filtered and ordered result to return
      recordTo?:
        type: integer
        format: int32
        description: last record of filtered and ordered result to return
      orderBy?:
        type: string[]
        description: an array of strings containing a column name and an optional sort direction (ASC/DESC), separated by white space
    responses:
      200:
        body:
          application/json:
            type: RestConfiguration[]
            example: !include ../../../../../model/src/main/resources/raml/examples/configuration-list.json
      429:
        description: The result list length exceeds a configured maximum.
        headers:
          Warning: !include types/error.raml
  post:
    description: |
      Create a new configuration
    displayName: createConfiguration
    body:
      application/json:
        type: RestConfiguration
        example: !include ../../../../../model/src/main/resources/raml/examples/configuration.json
    responses:
      201:
        body:
          application/json:
            type: RestConfiguration
            example: !include ../../../../../model/src/main/resources/raml/examples/configuration.json
  /count:
    get:
      description: |
        Count the configurations matching the specified mission, processor name, and configuration version.
      displayName: countConfigurations
      queryParameters:
        mission?: 
          type: string
          description: the mission code
        id?:
          type: integer
          format: long
        processorName?: 
          type: string[]
          description: an array of processor names the configurations belongs to
        configurationVersion?: 
          type: string
          description: the configuration version
        productQuality?: 
          type: string[]
          description: an array of product qualities
        processingMode?: 
          type: string[]
          description: an array of processing modes
      responses:
        200:
          body:
            text/plain:
  /{id}:
    uriParameters:
      id:
        type: integer
        format: long
    get:
      description: |
        Get a configuration by ID
      displayName: getConfigurationById
      responses:
        200:
          body:
            application/json:
              type: RestConfiguration
              example: !include ../../../../../model/src/main/resources/raml/examples/configuration.json
        404:
          description: The requested resource was not found                     
          headers:
            Warning: !include types/error.raml
    patch:
      description: |
        Update a configuration by ID
      displayName: modifyConfiguration
      body:
        application/json:
          type: RestConfiguration
          example: !include ../../../../../model/src/main/resources/raml/examples/configuration.json
      responses:
        200:
          body:
            application/json:
              type: RestConfiguration
              example: !include ../../../../../model/src/main/resources/raml/examples/configuration.json
        304:
          body:
            application/json:
              type: RestConfiguration
              example: !include ../../../../../model/src/main/resources/raml/examples/configuration.json
    delete:
      description: |
        Delete a configuration by ID
      displayName: deleteConfigurationById
      responses:
        204:      

/configuredprocessors:
  type: standard
  get:
    description: |
      Get configured processors, filtered by mission, identifier, processor name, processor version and/or configuration version
    displayName: getConfiguredProcessors
    queryParameters:
      mission?: 
        type: string
        description: the mission code
      id?:
        type: integer
        format: long
      identifier?: 
        type: string
        description: the identifier for the configured processor
      processorClass?: 
        type: string[]
        description: the processor class name
      processorVersion?: 
        type: string
        description: the processor version
      configurationVersion?: 
        type: string
        description: the configuration version
      enabled?: 
        type: string[]
        description: whether the workflow is enabled
      recordFrom?: 
        type: integer
        format: int32
        description: first record of filtered and ordered result to return
      recordTo?:
        type: integer
        format: int32
        description: last record of filtered and ordered result to return
      orderBy?:
        type: string[]
        description: an array of strings containing a column name and an optional sort direction (ASC/DESC), separated by white space
    responses:
      200:
        body:
          application/json:
            type: RestConfiguredProcessor[]
            example: !include ../../../../../model/src/main/resources/raml/examples/configuredprocessor-list.json
      429:
        description: The result list length exceeds a configured maximum.
        headers:
          Warning: !include types/error.raml
  post:
    description: |
      Create a new configured processor
    displayName: createConfiguredProcessor
    body:
      application/json:
        type: RestConfiguredProcessor
        example: !include ../../../../../model/src/main/resources/raml/examples/configuredprocessor.json
    responses:
      201:
        body:
          application/json:
            type: RestConfiguredProcessor
            example: !include ../../../../../model/src/main/resources/raml/examples/configuredprocessor.json
  /count:
    get:
      description: |
        Count the configuredProcessors matching the specified mission, identifier and configuredProcessor version.
      displayName: countConfiguredProcessors
      queryParameters:
        mission?: 
          type: string
          description: the mission code
        id?:
          type: integer
          format: long
        identifier?: 
          type: string
          description: the identifier
        processorClass?: 
          type: string[]
          description: the processor class name
        processorVersion?: 
          type: string
          description: the processor version
        configurationVersion?: 
          type: string
          description: the configuration version
        enabled?: 
          type: string[]
          description: whether the workflow is enabled
      responses:
        200:
          body:
            text/plain:
  /{id}:
    uriParameters:
      id:
        type: integer
        format: long
    get:
      description: |
        Get a configured processor by ID
      displayName: getConfiguredProcessorById
      responses:
        200:
          body:
            application/json:
              type: RestConfiguredProcessor
              example: !include ../../../../../model/src/main/resources/raml/examples/configuredprocessor.json
        400:
          description: The request sent to the server contains data which is not as expected e.g. invalid location URI
          headers:
            Warning: !include types/error.raml
    patch:
      description: |
        Update a configured processor by ID
      displayName: modifyConfiguredProcessor
      body:
        application/json:
          type: RestConfiguredProcessor
          example: !include ../../../../../model/src/main/resources/raml/examples/configuredprocessor.json
      responses:
        200:
          body:
            application/json:
              type: RestConfiguredProcessor
              example: !include ../../../../../model/src/main/resources/raml/examples/configuredprocessor.json
        304:
          body:
            application/json:
              type: RestConfiguredProcessor
              example: !include ../../../../../model/src/main/resources/raml/examples/configuredprocessor.json
    delete:
      description: |
        Delete a configured processor by ID
      displayName: deleteConfiguredProcessorById
      responses:
        204:

/workflows:
  type: standard
  get:
    description: |
      Get a list of all workflows with the specified mission, workflow name, workflow version, input product class and configured
      processor
    displayName: getWorkflows
    queryParameters:
      mission?: 
        type: string
        description: the mission code
      name?: 
        type: string
        description: the workflow name
      workflowVersion?: 
        type: string
        description: the workflow version
      inputProductClass?: 
        type: string
        description: the input product class
      configuredProcessor?: 
        type: string
        description: the configured processor
      enabled?: 
        type: boolean
        description: whether the workflow is enabled
      recordFrom?: 
        type: integer
        format: int32
        description: first record of filtered and ordered result to return
      recordTo?:
        type: integer
        format: int32
        description: last record of filtered and ordered result to return
      orderBy?:
        type: string[]
        description: an array of strings containing a column name and an optional sort direction (ASC/DESC), separated by white space
    responses:
      200:
        body:
          application/json:
            type: RestWorkflow[]
            example: !include ../../../../../model/src/main/resources/raml/examples/workflow-list.json
      429:
        description: The result list length exceeds a configured maximum.
        headers:
          Warning: !include types/error.raml
  post:
    description: |
      Create a workflow from the given Json object
    displayName: createWorkflow
    body:
      application/json:
        type: RestWorkflow
        example: !include ../../../../../model/src/main/resources/raml/examples/workflow.json
    responses:
      201:
        body:
          application/json:
            type: RestWorkflow
            example: !include ../../../../../model/src/main/resources/raml/examples/workflow.json
  /count:
    get:
      description: |
        Count the workflows matching the specified name, workflow version, input product class, or configured processor.
      displayName: countWorkflows
      queryParameters:
        mission?: 
          type: string
          description: the mission code
        name?: 
          type: string
          description: the workflow name
        workflowVersion?: 
          type: string
          description: the workflow version
        inputProductClass?: 
          type: string
          description: the input product class
        configuredProcessor?: 
          type: string
          description: the configured processor
        enabled?: 
          type: boolean
          description: whether the workflow is enabled
      responses:
        200:
          body:
            text/plain:
  /{id}:
    uriParameters:
      id:
        type: integer
        format: long
    get:
      description: |
        Find the workflow with the given ID
      displayName: getWorkflowById
      responses:
        200:
          body:
            application/json:
              type: RestWorkflow
              example: !include ../../../../../model/src/main/resources/raml/examples/workflow.json
        400:
          description: The request sent to the server contains data which is not as expected e.g. invalid location URI
          headers:
            Warning: !include types/error.raml
    patch:
      description: |
        Update the workflow with the given ID with the attribute values of the given Json object.
      displayName: modifyWorkflow
      body:
        application/json:
          type: RestWorkflow
          example: !include ../../../../../model/src/main/resources/raml/examples/workflow.json
      responses:
        200:
          body:
            application/json:
              type: RestWorkflow
              example: !include ../../../../../model/src/main/resources/raml/examples/workflow.json
        304:
          body:
            application/json:
              type: RestWorkflow
              example: !include ../../../../../model/src/main/resources/raml/examples/workflow.json
    delete:
      description: |
        Delete a workflow by ID
      displayName: deleteWorkflowById
      responses:
        204: