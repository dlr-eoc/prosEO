#%RAML 1.0
title: prosEO Product Class Manager REST Services API
version: v0.1
protocols: [ HTTPS ] 
baseUri: /proseo/productclass-mgr/{version}
mediaType: application/json

securitySchemes:
  basicAuth:
    description: Each request must contain the headers necessary for basic authentication
    type: Basic Authentication
    describedBy:
      headers:
        Authorization:
          description: Used to send the Base64-encoded "username:password" credentials
          type: string
      responses:
        401:
          description: |
            Unauthorized. Either the provided username and password 
            combination is invalid, or the user is not allowed to access
            the content provided by the requested URL.

types:
  RestProductClass: !include ../../../../../model/src/main/resources/raml/types/productclass.raml
  RestSimplePolicy: !include ../../../../../model/src/main/resources/raml/types/simplepolicy.raml
  RestSimpleSelectionRule: !include ../../../../../model/src/main/resources/raml/types/simpleselectionrule.raml
  RestSelectionRule: RestSimpleSelectionRule[]
  RestParameter: !include ../../../../../model/src/main/resources/raml/types/parameter.raml
  SelectionRuleString: !include ../../../../../interfaces/src/main/resources/raml/types/selectionrulestring.raml

resourceTypes:
  standard:
    get?:
      responses:
        404:
          description: The requested resource was not found.
          headers:
            Warning: !include types/error.raml
        403:
          description: A cross-mission data access was attempted.
          headers:
            Warning: !include types/error.raml
    put?:
      responses:  
        400:
          description: The request sent to the server contains data which is not as expected e.g. invalid location URI
          headers:
            Warning: !include types/error.raml
        403:
          description: A cross-mission data access was attempted.          
          headers:
            Warning: !include types/error.raml        
        404:
          description: The requested resource on which the modification is being attempted was not found.
          headers:
            Warning: !include types/error.raml
    patch?:
      responses:
        304:
          body:
            application/json:
              type: RestProductClass
              example: !include ../../../../../model/src/main/resources/raml/examples/productclass.json
        400:
          description: The request sent to the server contains data which is not as expected e.g. invalid location URI
          headers:
            Warning: !include types/error.raml
        403:
          description: A cross-mission data access was attempted.
          headers:
            Warning: !include types/error.raml
        404:
          description: The requested resource was not found                     
          headers:
            Warning: !include types/error.raml
        409:
          description: A concurrent modification was attempted.
          headers:
            Warning: !include types/error.raml
    delete?:
      responses:      
        400:
          description: The request sent to the server contains data which is not as expected e.g. invalid location URI
          headers:
            Warning: !include types/error.raml
        403:
          description: A cross-mission data access was attempted.          
          headers:
            Warning: !include types/error.raml
        404:
          description: The requested resource to delete was not found.
          headers:
            Warning: !include types/error.raml
              
/productclasses:
  type: standard
  get:
    description: |
      Get product classes, optionally filtered by mission, product type, processor
      class, processing level or visibility

      @param mission        the mission code
      @param productType    a list of product types as agreed in the mission specification documents (e. g. L2_CLOUD___)
      @param processorClass a list of processor types capable of producing products from the retrieved product classes
      @param level          the required level of processing for the retrieved product classes
      @param visibility     the visibility of products from the retrieved product classes to external users
      @param recordFrom     the first result to return
      @param recordTo       the last result to return
      @param orderBy        an array of strings containing a column name and an
                            optional sort direction (ASC/DESC), separated by white
                            space
      @return HTTP status "OK" and a list of Json objects representing product
              classes satisfying the search criteria or HTTP status "FORBIDDEN" and
              an error message, if a cross-mission data access was attempted, or
              HTTP status "NOT_FOUND" and an error message, if no product classes
              matching the search criteria were found HTTP status "TOO MANY
              REQUESTS" if the result list exceeds a configured maximum    
    displayName: getRestProductClass
    queryParameters:
      mission?: 
        type: string
        description: the mission code
      productType?: 
        type: string[]
        description: a list of product types as agreed in the mission specification documents (e. g. L2_CLOUD___)
      processorClass?: 
        type: string[]
        description: a list of processor types capable of producing products from the retrieved product classes
      level?: 
        type: string
        description: the required level of processing for the retrieved product classes
      visibility?: 
        type: string
        description: the visibility of products from the retrieved product classes to external users
      recordFrom?:
        type: integer
        format: int32
        description: the first result to return
      recordTo?:
        type: integer
        format: int32
        description: the last result to return
      orderBy?:
        type: string[]
        description: an array of strings containing a column name and an optional sort direction (ASC/DESC), separated by white space
    responses:
      200:
        body:
          application/json:
            type: RestProductClass[]
            example: !include ../../../../../model/src/main/resources/raml/examples/productclass-list.json
      429:
        description: The length of the result exceeds a configured maximum
        headers:
          Warning: !include types/error.raml    
  post:
    description: |
      Create a new product class

      @param restProductClass a Json object describing the new product class
      @return HTTP status "CREATED" and a response containing a Json object
              corresponding to the product class after persistence (with ID and
              version for all contained objects) or HTTP status "FORBIDDEN" and an
              error message, if a cross-mission data access was attempted, or HTTP
              status "BAD_REQUEST", if any of the input data was invalid
    displayName: createRestProductClass
    body:
      application/json:
        type: RestProductClass
        example: !include ../../../../../model/src/main/resources/raml/examples/productclass.json
    responses:
      201:
        body:
          application/json:
            type: RestProductClass
            example: !include ../../../../../model/src/main/resources/raml/examples/productclass.json                 
      400:
        description: The request sent to the server contains data which is not as expected e.g. invalid location URI
        headers:
          Warning: !include types/error.raml
      403:
        description: A cross-mission data access was attempted.          
        headers:
          Warning: !include types/error.raml   

  /count:
    get:
      description: |
        Get product classes, optionally filtered by mission, product type, processor
        class, processing level or visibility
      
        @param mission        the mission code
        @param productType    a list of product types as agreed in the mission specification documents (e. g. L2_CLOUD___)
        @param processorClass a list of processor types capable of producing products from the retrieved product classes
        @param level          the required level of processing for the retrieved product classes
        @param visibility     the visibility of products from the retrieved product classes to external users
        @return HTTP status "OK" and a list of Json objects representing product
                classes satisfying the search criteria or HTTP status "FORBIDDEN" and
                an error message, if a cross-mission data access was attempted, or
                HTTP status "NOT_FOUND" and an error message, if no product classes
                matching the search criteria were found      
      displayName: countProductClasses
      queryParameters:
        mission?: 
          type: string
          description: the mission code
        productType?: 
          type: string[]
          description: a list of product types as agreed in the mission specification documents (e. g. L2_CLOUD___)
        processorClass?: 
          type: string[]
          description: a list of processor types capable of producing products from the retrieved product classes
        level?: 
          type: string
          description: the required level of processing for the retrieved product classes
        visibility?: 
          type: string
          description: the visibility of products from the retrieved product classes to external users
      responses:
        200:
          body:
            text/plain:

  /names:
    get:
      description: |
        Get product classes, optionally filtered by mission and/or product type

        @param mission     the mission code
        @param productType a product type as agreed in the mission specification documents (e. g. L2_CLOUD___)
        @return HTTP status "OK" and a list of Json objects representing product classes satisfying the search criteria or HTTP
                status "FORBIDDEN" and an error message, if a cross-mission data access was attempted, or HTTP status "NOT_FOUND" and
                an error message, if no product classes matching the search criteria were found

      displayName: getProductClassNames
      queryParameters:
        mission?: 
          type: string
          description: the mission code
        productType?: 
          type: string
          description : a product type as agreed in the mission specification documents (e. g. L2_CLOUD___)
      responses:
        200:
          body:
            application/json:
              type: string[]

  /{id}:
    uriParameters:
      id:
        type: integer
        format: long
    get:
      description: |
        Get a product class by ID

        @param id the database ID of the product class
        @return HTTP status "OK" and a Json object corresponding to the product class found or HTTP status "BAD_REQUEST" and an error
                message, if no product class ID was given, or HTTP status "FORBIDDEN" and an error message, if a cross-mission data
                access was attempted, or HTTP status "NOT_FOUND" and an error message, if no product class with the given ID exists

      displayName: getRestProductClassById
      responses:
        200:
          body:
            application/json:
              type: RestProductClass
              example: !include ../../../../../model/src/main/resources/raml/examples/productclass.json
        400:
          description: The request sent to the server contains data which is not as expected e.g. invalid location URI
          headers:
            Warning: !include types/error.raml
    patch:
      description: |
        Update a product class by ID (does not update its selection rules)

        @param id           the database ID of the product class to update
        @param restProductClass a Json object describing the modified product class
        @return HTTP status "OK" and a response containing a Json object corresponding to the product class after modification (with
                ID and version for all contained objects) or HTTP status "NOT_FOUND" and an error message, if no product class with
                the given ID exists, or HTTP status "BAD_REQUEST" and an error message, if any of the input data was invalid, or HTTP
                status "FORBIDDEN" and an error message, if a cross-mission data access was attempted, or HTTP status "CONFLICT"and
                an error message, if the product class has been modified since retrieval by the client

      displayName: modifyRestProductClass
      body:
        application/json:
          type: RestProductClass
          example: !include ../../../../../model/src/main/resources/raml/examples/productclass.json
      responses:
        200:
          body:
            application/json:
              type: RestProductClass
              example: !include ../../../../../model/src/main/resources/raml/examples/productclass.json
    delete:
      description: |
        Delete a product class by ID (with all its selection rules)

        @param id the database ID of the product class to delete
        @return a response entity with HTTP status "NO_CONTENT", if the deletion was successful, or HTTP status "NOT_FOUND", if the
                product class did not exist, or HTTP status "NOT_MODIFIED", if the deletion was unsuccessful, or HTTP status
                "FORBIDDEN" and an error message, if a cross-mission data access was attempted, or HTTP status "BAD_REQUEST", if the
                product class ID was not given, or if dependent objects exist
      displayName: deleteProductclassById
      responses:
        204:
        304:
          body:
            application/json:
              type: RestProductClass
              example: !include ../../../../../model/src/main/resources/raml/examples/productclass.json

    /selectionrules:
      get:
        description: |
          Get the simple selection rules as formatted string, optionally selected by source class

          @param id          the database ID of the product class to get the selection rule from
          @param sourceClass the prosEO product type of the source class, from which the product class can be generated (may be null)
          @return HTTP status "OK" and a list of strings describing the selection rules for all configured processors or HTTP status
                  "FORBIDDEN" and an error message, if a cross-mission data access was attempted, or HTTP status "NOT_FOUND" and an
                  error message, if no selection rules matching the search criteria were found
        displayName: getSelectionRuleStrings
        queryParameters:
          sourceClass?:
            type: string
            description: the prosEO product type of the source class, from which the product class can be generated (may be null)
        responses:
          200:
            body:
              application/json:
                type: SelectionRuleString[]
                example: !include examples/selectionrule.json
      post:
        description: |
          Create a selection rule using Rule Language

          @param id                   the database ID of the product class
          @param selectionRuleString  a Json representation of a selection rule in Rule Language
          @return HTTP status "CREATED" and a response containing a Json object corresponding to the selection rule after persistence
                  (with ID and version for all contained objects) or HTTP status "FORBIDDEN" and an error message, if a cross-mission
                  data access was attempted, or HTTP status "BAD_REQUEST", if any of the input data was invalid
        body:
          application/json:
            type: SelectionRuleString[]
            example: !include examples/selectionrule.json
        responses:
          201:
            body:
              application/json:
                type: RestProductClass
                description: The product class with the added, converted selection rules
          400:
            description: The request sent to the server contains data which is not as expected e.g. invalid location URI
            headers:
              Warning: !include types/error.raml
          403:
            description: A cross-mission data access was attempted.          
            headers:
              Warning: !include types/error.raml

      /{ruleid}:
        uriParameters:
          ruleid:
            type: integer
            format: long
            description: Database id of the selection rule
        get:
          description: |
            Get a selection rule by ID

            @param ruleid the database ID of the simple selection rule to read
            @param id     the database ID of the product class
            @return HTTP status "OK" and a Json object corresponding to the simple selection rule in Rule Language or HTTP status
                    "BAD_REQUEST" and an error message, if no simple selection rule ID was given, or HTTP status "FORBIDDEN" and an error
                    message, if a cross-mission data access was attempted, or HTTP status "NOT_FOUND" and an error message, if no simple
                    selection rule with the given ID exists
          displayName: getSelectionRuleString
          responses:
            200:
              body:
                 application/json:
                   type: SelectionRuleString
            404:
              description: The requested resource was not found.                
              headers:
                Warning: !include types/error.raml
        patch:
          description:
            Update a selection rule using Rule Language

            @param ruleid              the database ID of the simple selection rule to update
            @param id                  the database ID of the product class
            @param selectionRuleString a Json object representing the simple selection rule in Rule Language
            @return HTTP status "OK" and a response containing a Json object corresponding to the modified simple selection rule in Rule
                    Language (with ID and version for all contained objects) or HTTP status "NOT_FOUND" and an error message, if if the
                    rule ID is invalid or the rule does not belong to the given product class, or HTTP status "BAD_REQUEST" and an error
                    message, if any of the input data was invalid, or HTTP status "FORBIDDEN" and an error message, if a cross-mission
                    data access was attempted, or HTTP status "CONFLICT"and an error message, if the simple selection rule has been
                    modified since retrieval by the client
          displayName: modifySelectionRuleString
          body:
            application/json:
              type: SelectionRuleString
          responses:
            200:
              body:
                application/json:
                  type: SelectionRuleString
        delete:
          description: |
            Delete a selection rule

            @param ruleid the database ID of the simple selection rule to delete
            @param id     the database ID of the product class
            @return a response entity with HTTP status "NO_CONTENT", if the deletion was successful, or HTTP status "NOT_FOUND", if the
                    if the selection rule to delete or the product class do not exist in the database, or HTTP status "FORBIDDEN" and an
                    error message, if a cross-mission data access was attempted, or HTTP status "BAD_REQUEST", if the ID of the product
                    class or the selection rule was not given, or the rule cannot be deleted due to existing product queries
          displayName: deleteSelectionrule
          responses:
            204:

        /{configuredProcessor}:
          uriParameters:
            configuredProcessor:
              type: string
              description: The configured processor, for which the selection rule is valid
          put:
            description: |
              Add the configured processor to the selection rule (if it is not already part of the selection rule)
 
              @param configuredProcessor the name of the configured processor to add to the selection rule
              @param ruleid              the database ID of the simple selection rule
              @param id                  the database ID of the product class
              @return HTTP status "OK" and a response containing a Json object corresponding to the modified simple selection rule in Rule
                      Language, if the addition was successful, or HTTP status "NOT_FOUND", if no configured processor with the given name
                      or no selection rule or product class with the given ID exist, or HTTP status "FORBIDDEN" and an error message, if a
                      cross-mission data access was attempted, or HTTP status "BAD_REQUEST", if the product class ID, the selection rule ID
                      or the name of the configured processor were not given
            displayName: addProcessorToRule
            responses:
              200:
                body:
                  application/json:
                    type: SelectionRuleString
                    description: The modified selection rule
          delete:
            description: 
              Remove the configured processor from the selection rule (the selection rule will be disconnected from the configured
              processor)

              @param configuredProcessor the name of the configured processor to remove from the selection rule
              @param ruleid              the database ID of the simple selection rule
              @param id                  the database ID of the product class
              @return HTTP status "OK" and a response containing a Json object corresponding to the modified simple selection rule in Rule
                      Language, if the removal was successful, or HTTP status "NOT_FOUND", if no configured processor with the given name
                      or no selection rule or product class with the given ID exist, or HTTP status "FORBIDDEN" and an error message, if a
                      cross-mission data access was attempted, or HTTP status "BAD_REQUEST", if the product class ID, the selection rule ID
                      or the name of the configured processor were not given
            displayName: removeProcessorFromRule
            responses:
              200:
                body:
                  application/json:
                    type: SelectionRuleString
                    description: The modified selection rule