2020-03-25 21:22:21.882  INFO 13286 --- [main] d.d.proseo.ui.cli.CommandLineInterface   : Starting CommandLineInterface v0.1.0 on localhost with PID 13286 (/Users/thomas/Documents/Thomas Beruf/Managementberatung/30 Kunden/DLR-EOC/Copernicus/S5P/S5P Processing Subsystem/prosEO/ui/cli/target/proseo-ui-cli.jar started by thomas in /Users/thomas/Documents/Thomas Beruf/Managementberatung/30 Kunden/DLR-EOC/Copernicus/S5P/S5P Processing Subsystem/prosEO/samples/testdata)
2020-03-25 21:22:21.884 DEBUG 13286 --- [main] d.d.proseo.ui.cli.CommandLineInterface   : Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2020-03-25 21:22:21.884  INFO 13286 --- [main] d.d.proseo.ui.cli.CommandLineInterface   : No active profile set, falling back to default profiles: default
2020-03-25 21:22:23.036  INFO 13286 --- [main] d.d.proseo.ui.cli.CommandLineInterface   : Started CommandLineInterface in 1.692 seconds (JVM running for 2.07)
2020-03-25 21:22:23.036 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> run({})
2020-03-25 21:22:23.037 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLISyntax    : >>> fromSyntaxFile(ui-cli-syntax.yml)
2020-03-25 21:22:23.093 TRACE 13286 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> UIMessages::<init>
2020-03-25 21:22:23.096 TRACE 13286 --- [main] de.dlr.proseo.ui.backend.UIMessages      : ... number of messages found: 183
2020-03-25 21:22:23.096 TRACE 13286 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2900, [ui-cli-syntax.yml])
2020-03-25 21:22:23.097  INFO 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLISyntax    : (I2900) Command line syntax loaded from syntax file ui-cli-syntax.yml
2020-03-25 21:22:23.098 DEBUG 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLISyntax    : Syntax definition: CLISyntax [
  title=prosEO UI Command Line Interface Syntax,
  version=v0.1,
  description=Commands can be entered after the "prosEO>" command prompt. They can also be invoked on the shell command line 
following the name of the prosEO executable (e. g. "proseo") and at least one whitespace character.

Commands may have subcommands, which precede all options and parameters.

Commands may have options (--option, a short form -o may be given as alias) and parameters
(passed as values without the parameter name).

Modal options can be combined into one option, i. e. "-a -b -c" is the same as "-abc".
Options with values are either of the form "-ovalue" or "--option=value";
in the case of multiple values "--option=value,value,value".

Parameters are positional, except (implicitly) for attribute parameters of the form "<attribute name>=<attribute value>".
Attribute values may be comma-separated string lists, but they cannot represent attributes of more complex types. To set
complex object attributes use the "--file" option and pass a Json, XML or Yaml file.

All date-time values must conform to the ISO date-time format ("YYYY-MM-DDTHH:MM:SS").

So the general syntax is:
command [subcommand...] [option...] [parameter...]

Caution: Typing ^C (Control-C) terminates the Command Line Interface immediately.
,
  globalOptions=[CLIOption [
  name=help,
  type=boolean,
  description=Show help information for the current command/subcommand level (top level commands, when called from the shell command line),
  shortForm=h
]],
  options=[CLIOption [
  name=version,
  type=boolean,
  description=Show the prosEO CLI version and exit (only for call from shell command line),
  shortForm=V
], CLIOption [
  name=user,
  type=string,
  description=The user name for login to prosEO.,
  shortForm=u
], CLIOption [
  name=password,
  type=string,
  description=The password for login to prosEO (only valid if a user name for login is given).,
  shortForm=p
], CLIOption [
  name=mission,
  type=string,
  description=The mission to login to (only valid if a user name for login is given),
  shortForm=m
]],
  commands=[CLICommand [
  name=exit,
  description=Terminate the Command Line Interface,
  subcommands=[],
  options=[],
  parameters=[]
], CLICommand [
  name=help,
  description=Show the prosEO Command Line Interface help information (this page; for subcommand help, type "<subcommand> --help"),
  subcommands=[],
  options=[],
  parameters=[]
], CLICommand [
  name=login,
  description=Log in to a mission in prosEO. All valid commands except for "mission show" require prior login.,
  subcommands=[],
  options=[CLIOption [
  name=user,
  type=string,
  description=User name,
  shortForm=u
], CLIOption [
  name=password,
  type=string,
  description=The user's password,
  shortForm=p
]],
  parameters=[CLIParameter [
  name=missionCode,
  type=string,
  description=The code of the mission to log in to (may be empty for user with prosEO Administrator privileges),
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=logout,
  description=Log out of prosEO. No commands except "mission show" and "login" will be accepted after logout.,
  subcommands=[],
  options=[],
  parameters=[]
], CLICommand [
  name=mission,
  description=Commands related to configuring an earth observation mission,
  subcommands=[CLICommand [
  name=show,
  description=List all configured missions or only the given one,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=missionCode,
  type=string,
  description=The code of the mission to list,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new earth observation mission in prosEO,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the mission definitions from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=missionCode,
  type=string,
  description=The code of the mission (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A mission attribute to update in the form "<attribute name>=<attribute value>", overrides values given in the mission definition file,
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update the mission attributes; if the input is not from a file, the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the updated mission definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=attribute,
  type=string,
  description=A mission attribute to update in the form "<attribute name>=<attribute value>", overrides values given in the mission definition file,
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=spacecraft,
  description=Commands to manage the spacecrafts for a mission,
  subcommands=[CLICommand [
  name=add,
  description=Add a spacecraft to the mission list of spacecrafts; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the updated mission definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft to remove (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A spacecraft attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=remove,
  description=Remove a spacecraft from the mission list of spacecrafts,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft to remove,
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=orbit,
  description=Commands for managing orbits for a given spacecraft,
  subcommands=[CLICommand [
  name=show,
  description=Lists orbits, optionally restricted to a given orbit range,
  subcommands=[],
  options=[CLIOption [
  name=from,
  type=integer,
  description=Lower bound of orbit range,
  shortForm=null
], CLIOption [
  name=to,
  type=integer,
  description=Upper bound of orbit range,
  shortForm=null
], CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft the orbits belong to,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Add a set of orbits for the given spacecraft,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the orbit definitions from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft the orbits belong to (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=An orbit attribute to update in the form "<attribute name>=<attribute value>", only allowed if no orbit file is given (i. e. a single orbit is created),
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a set of orbits for the given spacecraft,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the orbit definitions from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft the orbits belong to (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=orbitNumber,
  type=string,
  description=The number of the orbit to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=An orbit attribute to update in the form "<attribute name>=<attribute value>", only allowed if no orbit file is given (i. e. a single orbit is updated),
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Deletes orbits in a given orbit range,
  subcommands=[],
  options=[CLIOption [
  name=from,
  type=integer,
  description=Lower bound of orbit range,
  shortForm=null
], CLIOption [
  name=to,
  type=integer,
  description=Upper bound of orbit range,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft the orbits belong to,
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=order,
  description=Commands for managing processing orders; some commands can only be issued, if the order is in the correct status. Order status sequence is Initial - Approved - Planned - Released - Running - Completed/Failed - Closed. Additionally an order may be in status "Suspending" after issuing a "suspend" command, until all running job steps are finished.,
  subcommands=[CLICommand [
  name=show,
  description=Lists orders, optionally restricted to a given time range or a specific processing order,
  subcommands=[],
  options=[CLIOption [
  name=from,
  type=datetime,
  description=Lower bound of order start time,
  shortForm=null
], CLIOption [
  name=to,
  type=datetime,
  description=Upper bound of order start time,
  shortForm=null
], CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier (overrides --from and --to options),
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new processing order (in status Initial); if the input is not from a file, the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the order definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier for user reference (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=An order attribute to update in the form "<attribute name>=<attribute value>", overrides values given in the order definition file,
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a processing order (only allowed in status Initial),
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the order definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the order definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier for user reference (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=An order attribute to update in the form "<attribute name>=<attribute value>", overrides values given in the order definition file,
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=approve,
  description=Approve the named processing order for planning (must be in status Initial, new status is Approved),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=plan,
  description=Plan the jobs for the named processing order (must be in status Approved, new status is Planned),
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format for the resulting job list (one of { NONE, JSON, XML, YAML }; default value NONE),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
], CLIParameter [
  name=facility,
  type=string,
  description=The processing facility, on which the order shall be run,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=reset,
  description=Reset the named processing order to initial state (must be in status Approved or Planned, new status is Initial),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=release,
  description=Release the jobs of the named processing order for processing (must be in status Planned, new status is Released; order status will change to Running, when execution of the first job step starts; when all job steps are finished, the status will change again to Completed, if all job steps finished successfully, or Failed, if at least one job step failed),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=suspend,
  description=Suspend starting of further jobs for the named processing order (must be in status Released or Running, new status is Suspending, then Planned, when all running job steps are finished),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=resume,
  description=Resume starting of jobs for the named processing order after suspend (order must be in status Planned, new status is Released [actually the same command as "release"]),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=cancel,
  description=Cancel the named processing order (remaining jobs are not executed, order state changes to Failed; order must be in status Planned, i. e. it may be necessary to issue a "suspend" command first),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=close,
  description=Close the named processing order (must be in status Completed or Failed, new status is Closed),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=delete,
  description=Delete the named processing order (only allowed in status Initial or Closed),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=processor,
  description=Commands for managing processor classes, processors, configurations and configured processors,
  subcommands=[CLICommand [
  name=class,
  description=Commands for managing processor classes,
  subcommands=[CLICommand [
  name=show,
  description=Show all processor classes for the current mission or a named one,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor classes to show,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new processor class for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the processor class definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor class to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A processor class attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a processor class for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the processor class definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor classes to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A processor class attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Remove the named processor class from the current mission,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor classes to update (mandatory if not read from file),
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=show,
  description=Show all processor versions for the current mission or only the selected ones,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The class name of the processor to show,
  optional=true,
  repeatable=false
], CLIParameter [
  name=processorVersion,
  type=string,
  description=The version of the processor to show,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new processor version for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the processor version definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The class name of the processor to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=processorVersion,
  type=string,
  description=The version of the processor to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A processor attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a processor version for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the processor version definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the order definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The class name of the processor to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=processorVersion,
  type=string,
  description=The version of the processor to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A processor attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete a processor version from the current mission,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The class name of the processor to delete,
  optional=false,
  repeatable=false
], CLIParameter [
  name=processorVersion,
  type=string,
  description=The version of the processor to delete,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=configuration,
  description=Commands to manage configured processors,
  subcommands=[CLICommand [
  name=show,
  description=Show all configured processor for the current mission or only the ones identified,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=configuredProcessorIdentifier,
  type=string,
  description=The identifier of the configured processor,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new configured processor by combining a processor version and a configuration; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the configured processor definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=configuredProcessorIdentifier,
  type=string,
  description=The identifier of the configured processor,
  optional=true,
  repeatable=false
], CLIParameter [
  name=className,
  type=string,
  description=The class name of the processor (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=processorVersion,
  type=string,
  description=The version of the processor (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=configurationVersion,
  type=string,
  description=The version of the configuration (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A configured processor attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a configured processor; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the configured processor definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=configuredProcessorIdentifier,
  type=string,
  description=The identifier of the configured processor (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A configured processor attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete a configured processor,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=configuredProcessorIdentifier,
  type=string,
  description=The identifier of the configured processor to delete,
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=configuration,
  description=Commands for managing configurations,
  subcommands=[CLICommand [
  name=show,
  description=Show all configurations for the current mission and processor class or a named one,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor classes for the configurations,
  optional=true,
  repeatable=false
], CLIParameter [
  name=configurationVersion,
  type=string,
  description=The configuration versions to show,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new configuration for the current mission and processor class; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the configuration definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor class (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=configurationVersion,
  type=string,
  description=The version of the configuration to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A configuration attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a configuration for the current mission and processor class; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the configuration definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the order definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor class (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=configurationVersion,
  type=string,
  description=The version of the configuration to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A configuration attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Remove a configuration from the current mission and processor class,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor class,
  optional=false,
  repeatable=false
], CLIParameter [
  name=configurationVersion,
  type=string,
  description=The version of the configuration to delete,
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=productclass,
  description=Commands for managing product classes,
  subcommands=[CLICommand [
  name=show,
  description=Show all product classes for the current mission or only the selected ones,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the product class to show,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new product class for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the product class definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the product class name to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A product class attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a product class for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the product class definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the product class definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the product class name to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A product class attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete the named product class from the current mission,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the product class to delete,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=rule,
  description=Commands for managing selection rules,
  subcommands=[CLICommand [
  name=show,
  description=Show all selection rules for the current mission and target product class,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { PLAIN, JSON, XML, YAML }; default value PLAIN [rule language]).,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=targetProductClass,
  type=string,
  description=The product class using the selection rules,
  optional=false,
  repeatable=false
], CLIParameter [
  name=sourceProductClass,
  type=string,
  description=The product class requested by the selection rules,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new selection rule for the given target product class; the user will be prompted for mandatory attributes not given on the command line. If PLAIN format is specified and no file name is given, the user will be prompted to enter the selection rule in Rule Language.,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the selection rule definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { PLAIN, JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=targetProductClass,
  type=string,
  description=The target product class name (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A selection rule attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a selection rule for the given target class and configured processor; the user will be prompted for mandatory attributes not given on the command line. If PLAIN format is specified and no file name is given, the user will be prompted to enter the selection rule in Rule Language. If multiple rules exist for the target product class, the user will be prompted to select the rule to apply the update to.,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the selection rule definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { PLAIN, JSON, XML, YAML }; default value JSON) Note. Only PLAIN format is implemented for the time being.,
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the selection rule definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=targetProductClass,
  type=string,
  description=The target product class name (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A selection rule attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete the selection rule for the given target class,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=targetProductClass,
  type=string,
  description=The product class name of the selection rule,
  optional=true,
  repeatable=false
], CLIParameter [
  name=ruleId,
  type=string,
  description=The database ID of the selection rule to delete,
  optional=true,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=product,
  description=Commands for managing products,
  subcommands=[CLICommand [
  name=show,
  description=Show products for a mission and product class, optionally restricted to a given time range,
  subcommands=[],
  options=[CLIOption [
  name=from,
  type=datetime,
  description=Lower bound of sensing start time,
  shortForm=null
], CLIOption [
  name=to,
  type=datetime,
  description=Upper bound of sensing start time,
  shortForm=null
], CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the product class to show,
  optional=false,
  repeatable=true
]]
], CLICommand [
  name=create,
  description=Create a new product for the current mission and product class; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the product definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The class name of the product to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A product attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a product for the current mission and product class; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the product definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the product definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=id,
  type=integer,
  description=The database ID of the product to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A product attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete the product with the given database ID,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=id,
  type=integer,
  description=The database ID of the product to delete,
  optional=true,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=ingest,
  description=Ingest all products into the storage manager of the given processing facility,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the ingested products from (mandatory),
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=processingFacility,
  type=string,
  description=The name of the facility to ingest the products to,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=user,
  description=Commands for managing users (note that user names are stored with a mission prefix in the user database, but the mission prefix is not used in the command-line interface),
  subcommands=[CLICommand [
  name=show,
  description=Show user accounts for the current mission,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
], CLIOption [
  name=verbose,
  type=boolean,
  description=If set, give user details, otherwise show usernames only (setting username parameter implies verbose),
  shortForm=v
]],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to show (without mission prefix),
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new user account within the given mission,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the user account definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=mission,
  type=string,
  description=The mission to create the user for (only valid if not yet logged in into a mission; basically intended for creating a single user with "ROLE_USERMGR" for a new mission),
  shortForm=m
]],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to create (without mission prefix; mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A user attribute to set in the form "<attribute name>=<attribute value>" (if a password is specified here, it must be unencrypted, while in the file it must be encrypted),
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update the given user account; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the user account definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the user account definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to update (without mission prefix; mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A user account attribute to set in the form "<attribute name>=<attribute value>" (if a password is specified here, it must be unencrypted, while in the file it must be encrypted),
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete the user account with the given name,
  subcommands=[],
  options=[CLIOption [
  name=mission,
  type=string,
  description=The mission to delete the user from (only valid if not yet logged in into a mission; basically intended for removing the last user with "ROLE_USERMGR" from a mission before deletion),
  shortForm=m
]],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to delete (without mission prefix),
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=enable,
  description=Enable the user account with the given name,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to enable (without mission prefix),
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=disable,
  description=Disable the user account with the given name,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to disable (without mission prefix),
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=grant,
  description=Grant authorities for the current mission directly to the user (not recommended, use of group authorities recommended),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to grant authorities to (without mission prefix; mandatory if not read from file),
  optional=false,
  repeatable=false
], CLIParameter [
  name=authority,
  type=string,
  description=An authority to grant (multiple authorities allowed),
  optional=false,
  repeatable=true
]]
], CLICommand [
  name=revoke,
  description=Revoke authorities for the current mission from the user (directly granted authorities only),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to revoke authorities from (without mission prefix; mandatory if not read from file),
  optional=false,
  repeatable=false
], CLIParameter [
  name=authority,
  type=string,
  description=An authority to revoke (multiple authorities allowed),
  optional=false,
  repeatable=true
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=group,
  description=Commands for managing groups (note that group names are stored with a mission prefix in the user database, but the mission prefix is not used in the command-line interface),
  subcommands=[CLICommand [
  name=show,
  description=Show user groups for the current mission,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
], CLIOption [
  name=verbose,
  type=boolean,
  description=If set, give user group details, otherwise show group names only (setting group name parameter implies verbose),
  shortForm=v
]],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to show (without mission prefix),
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new user group within the given mission,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the user group definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to create (without mission prefix; mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A group attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update the given user group; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the user group definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the user group definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to update (without mission prefix; mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A user group attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete the group account with the given name,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to delete (without mission prefix),
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=grant,
  description=Grant authorities for the current mission to the user group,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to grant authorities to (without mission prefix),
  optional=false,
  repeatable=false
], CLIParameter [
  name=authority,
  type=string,
  description=An authority to grant (multiple authorities allowed),
  optional=false,
  repeatable=true
]]
], CLICommand [
  name=revoke,
  description=Revoke authorities for the current mission from the user group,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to revoke authorities from (without mission prefix),
  optional=false,
  repeatable=false
], CLIParameter [
  name=authority,
  type=string,
  description=An authority to revoke (multiple authorities allowed),
  optional=false,
  repeatable=true
]]
], CLICommand [
  name=members,
  description=List the user accounts of a user group (for the current mission only, users may have different group associations in different missions),
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
], CLIOption [
  name=verbose,
  type=boolean,
  description=If set, give user details, otherwise show user names only,
  shortForm=v
]],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to list the users for (without mission prefix),
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=add,
  description=Add user accounts to the user group (for the current mission only, users may have different group associations in different missions),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to add users to (without mission prefix),
  optional=false,
  repeatable=false
], CLIParameter [
  name=userName,
  type=string,
  description=The name of a user account to add (without mission prefix; multiple user names allowed),
  optional=false,
  repeatable=true
]]
], CLICommand [
  name=remove,
  description=Remove user accounts from the user group (for the current mission only),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to remove users from (without mission prefix),
  optional=false,
  repeatable=false
], CLIParameter [
  name=userName,
  type=string,
  description=The name of a user account to add (without mission prefix; multiple user names allowed),
  optional=false,
  repeatable=true
]]
]],
  options=[],
  parameters=[]
]]
]
2020-03-25 21:22:23.120  WARN 13286 --- [main] org.jline                                : Unable to create a system terminal, creating a dumb terminal (enable debug logging for more information)
2020-03-25 21:22:23.197 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parse(login -usysadm -psysadmmission create --file=PTM.json)
2020-03-25 21:22:23.197 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseOption(-usysadm, login)
2020-03-25 21:22:23.198 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseMultipleModalOptions(-usysadm, login)
2020-03-25 21:22:23.198 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseOption()
2020-03-25 21:22:23.198 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseOption(-psysadmmission, login)
2020-03-25 21:22:23.198 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseMultipleModalOptions(-psysadmmission, login)
2020-03-25 21:22:23.198 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseOption()
2020-03-25 21:22:23.198 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseParameter(create, 0, login)
2020-03-25 21:22:23.198 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseParameter()
2020-03-25 21:22:23.198 TRACE 13286 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2911, [--file=PTM.json])
2020-03-25 21:22:23.202 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parse(user create --mission=PTM usermgr authorities=ROLE_USERMGR)
2020-03-25 21:22:23.202 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseOption(--mission=PTM, create)
2020-03-25 21:22:23.202 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseOption()
2020-03-25 21:22:23.202 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseParameter(usermgr, 0, create)
2020-03-25 21:22:23.202 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseParameter()
2020-03-25 21:22:23.202 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseParameter(authorities=ROLE_USERMGR, 1, create)
2020-03-25 21:22:23.202 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseParameter()
2020-03-25 21:22:23.203 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parse()
2020-03-25 21:22:23.203 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : ... received command 'user'
2020-03-25 21:22:23.203 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> executeCommand(user)
2020-03-25 21:22:23.203 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.UserCommandRunner   : >>> executeCommand(user)
2020-03-25 21:22:23.203 TRACE 13286 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2802, [user])
2020-03-25 21:22:23.203 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< executeCommand({})
2020-03-25 21:22:23.204 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parse(usermgr)
2020-03-25 21:22:23.204 TRACE 13286 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2916, [usermgr])
2020-03-25 21:22:23.205 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parse(usermgr)
2020-03-25 21:22:23.205 TRACE 13286 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2916, [usermgr])
2020-03-25 21:22:23.207 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parse(login --user=usermgr --password=usermgr PTM)
2020-03-25 21:22:23.207 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseOption(--user=usermgr, login)
2020-03-25 21:22:23.207 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseOption()
2020-03-25 21:22:23.207 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseOption(--password=usermgr, login)
2020-03-25 21:22:23.207 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseOption()
2020-03-25 21:22:23.207 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseParameter(PTM, 0, login)
2020-03-25 21:22:23.207 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseParameter()
2020-03-25 21:22:23.207 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parse()
2020-03-25 21:22:23.207 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : ... received command 'login'
2020-03-25 21:22:23.207 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> executeCommand(login)
2020-03-25 21:22:23.207 TRACE 13286 --- [main] de.dlr.proseo.ui.backend.LoginManager    : >>> doLogin(usermgr, ********, PTM)
2020-03-25 21:22:23.208 TRACE 13286 --- [main] de.dlr.proseo.ui.backend.LoginManager    : >>> login(PTM-usermgr, ********, PTM)
2020-03-25 21:22:23.208 TRACE 13286 --- [main] d.d.proseo.ui.backend.ServiceConnection  : >>> getFromService(http://localhost:8086/proseo/user-mgr/v0.1, /login?mission=PTM, interface java.util.List, user, password)
2020-03-25 21:22:23.404 TRACE 13286 --- [main] d.d.proseo.ui.backend.ServiceConnection  : ... calling service URL http://localhost:8086/proseo/user-mgr/v0.1/login?mission=PTM with GET
2020-03-25 21:22:23.828 TRACE 13286 --- [main] d.d.proseo.ui.backend.ServiceConnection  : <<< getFromService()
2020-03-25 21:22:23.828 TRACE 13286 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2821, [usermgr])
2020-03-25 21:22:23.828  INFO 13286 --- [main] de.dlr.proseo.ui.backend.LoginManager    : (I2821) User usermgr logged in
2020-03-25 21:22:23.829 DEBUG 13286 --- [main] de.dlr.proseo.ui.backend.LoginManager    : ... with authorities: [ROLE_USERMGR]
2020-03-25 21:22:23.829 TRACE 13286 --- [main] de.dlr.proseo.ui.backend.LoginManager    : <<< doLogin()
2020-03-25 21:22:23.829 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< executeCommand({})
2020-03-25 21:22:23.831 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parse(user create proseo)
2020-03-25 21:22:23.831 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseParameter(proseo, 0, create)
2020-03-25 21:22:23.831 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseParameter()
2020-03-25 21:22:23.831 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parse()
2020-03-25 21:22:23.831 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : ... received command 'user'
2020-03-25 21:22:23.831 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> executeCommand(user)
2020-03-25 21:22:23.831 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.UserCommandRunner   : >>> executeCommand(user)
2020-03-25 21:22:23.831 TRACE 13286 --- [main] de.dlr.proseo.ui.cli.UserCommandRunner   : >>> createUser(CLICommand [
  name=create,
  subcommand=null,
  options=[],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  value=proseo
]]
])
2020-03-25 21:22:23.833  INFO 13286 --- [main] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-03-25 21:22:23.835 ERROR 13286 --- [main] o.s.boot.SpringApplication               : Application run failed

java.lang.IllegalStateException: Failed to execute CommandLineRunner
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:782)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:763)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202)
	at de.dlr.proseo.ui.cli.CommandLineInterface.main(CommandLineInterface.java:314)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:47)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:86)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:50)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51)
Caused by: java.lang.NullPointerException: null
	at de.dlr.proseo.ui.cli.UserCommandRunner.createUser(UserCommandRunner.java:346)
	at de.dlr.proseo.ui.cli.UserCommandRunner.executeCommand(UserCommandRunner.java:1542)
	at de.dlr.proseo.ui.cli.CommandLineInterface.executeCommand(CommandLineInterface.java:206)
	at de.dlr.proseo.ui.cli.CommandLineInterface.run(CommandLineInterface.java:301)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:779)
	... 13 common frames omitted

2020-03-25 21:22:23.839 TRACE 13286 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2925, [Failed to execute CommandLineRunner])
2020-03-25 21:22:23.839 ERROR 13286 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : (E2925) prosEO Command Line Interface terminated by exception: Failed to execute CommandLineRunner

java.lang.IllegalStateException: Failed to execute CommandLineRunner
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:782)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:763)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202)
	at de.dlr.proseo.ui.cli.CommandLineInterface.main(CommandLineInterface.java:314)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:47)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:86)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:50)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51)
Caused by: java.lang.NullPointerException: null
	at de.dlr.proseo.ui.cli.UserCommandRunner.createUser(UserCommandRunner.java:346)
	at de.dlr.proseo.ui.cli.UserCommandRunner.executeCommand(UserCommandRunner.java:1542)
	at de.dlr.proseo.ui.cli.CommandLineInterface.executeCommand(CommandLineInterface.java:206)
	at de.dlr.proseo.ui.cli.CommandLineInterface.run(CommandLineInterface.java:301)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:779)
	... 13 common frames omitted

2020-03-25 21:31:52.559  INFO 13404 --- [main] d.d.proseo.ui.cli.CommandLineInterface   : Starting CommandLineInterface v0.1.0 on localhost with PID 13404 (/Users/thomas/Documents/Thomas Beruf/Managementberatung/30 Kunden/DLR-EOC/Copernicus/S5P/S5P Processing Subsystem/prosEO/ui/cli/target/proseo-ui-cli.jar started by thomas in /Users/thomas/Documents/Thomas Beruf/Managementberatung/30 Kunden/DLR-EOC/Copernicus/S5P/S5P Processing Subsystem/prosEO/samples/testdata)
2020-03-25 21:31:52.561 DEBUG 13404 --- [main] d.d.proseo.ui.cli.CommandLineInterface   : Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2020-03-25 21:31:52.561  INFO 13404 --- [main] d.d.proseo.ui.cli.CommandLineInterface   : No active profile set, falling back to default profiles: default
2020-03-25 21:31:53.539  INFO 13404 --- [main] d.d.proseo.ui.cli.CommandLineInterface   : Started CommandLineInterface in 1.463 seconds (JVM running for 1.836)
2020-03-25 21:31:53.539 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> run({})
2020-03-25 21:31:53.540 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLISyntax    : >>> fromSyntaxFile(ui-cli-syntax.yml)
2020-03-25 21:31:53.589 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> UIMessages::<init>
2020-03-25 21:31:53.591 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.UIMessages      : ... number of messages found: 183
2020-03-25 21:31:53.591 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2900, [ui-cli-syntax.yml])
2020-03-25 21:31:53.591  INFO 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLISyntax    : (I2900) Command line syntax loaded from syntax file ui-cli-syntax.yml
2020-03-25 21:31:53.592 DEBUG 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLISyntax    : Syntax definition: CLISyntax [
  title=prosEO UI Command Line Interface Syntax,
  version=v0.1,
  description=Commands can be entered after the "prosEO>" command prompt. They can also be invoked on the shell command line 
following the name of the prosEO executable (e. g. "proseo") and at least one whitespace character.

Commands may have subcommands, which precede all options and parameters.

Commands may have options (--option, a short form -o may be given as alias) and parameters
(passed as values without the parameter name).

Modal options can be combined into one option, i. e. "-a -b -c" is the same as "-abc".
Options with values are either of the form "-ovalue" or "--option=value";
in the case of multiple values "--option=value,value,value".

Parameters are positional, except (implicitly) for attribute parameters of the form "<attribute name>=<attribute value>".
Attribute values may be comma-separated string lists, but they cannot represent attributes of more complex types. To set
complex object attributes use the "--file" option and pass a Json, XML or Yaml file.

All date-time values must conform to the ISO date-time format ("YYYY-MM-DDTHH:MM:SS").

So the general syntax is:
command [subcommand...] [option...] [parameter...]

Caution: Typing ^C (Control-C) terminates the Command Line Interface immediately.
,
  globalOptions=[CLIOption [
  name=help,
  type=boolean,
  description=Show help information for the current command/subcommand level (top level commands, when called from the shell command line),
  shortForm=h
]],
  options=[CLIOption [
  name=version,
  type=boolean,
  description=Show the prosEO CLI version and exit (only for call from shell command line),
  shortForm=V
], CLIOption [
  name=user,
  type=string,
  description=The user name for login to prosEO.,
  shortForm=u
], CLIOption [
  name=password,
  type=string,
  description=The password for login to prosEO (only valid if a user name for login is given).,
  shortForm=p
], CLIOption [
  name=mission,
  type=string,
  description=The mission to login to (only valid if a user name for login is given),
  shortForm=m
]],
  commands=[CLICommand [
  name=exit,
  description=Terminate the Command Line Interface,
  subcommands=[],
  options=[],
  parameters=[]
], CLICommand [
  name=help,
  description=Show the prosEO Command Line Interface help information (this page; for subcommand help, type "<subcommand> --help"),
  subcommands=[],
  options=[],
  parameters=[]
], CLICommand [
  name=login,
  description=Log in to a mission in prosEO. All valid commands except for "mission show" require prior login.,
  subcommands=[],
  options=[CLIOption [
  name=user,
  type=string,
  description=User name,
  shortForm=u
], CLIOption [
  name=password,
  type=string,
  description=The user's password,
  shortForm=p
]],
  parameters=[CLIParameter [
  name=missionCode,
  type=string,
  description=The code of the mission to log in to (may be empty for user with prosEO Administrator privileges),
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=logout,
  description=Log out of prosEO. No commands except "mission show" and "login" will be accepted after logout.,
  subcommands=[],
  options=[],
  parameters=[]
], CLICommand [
  name=mission,
  description=Commands related to configuring an earth observation mission,
  subcommands=[CLICommand [
  name=show,
  description=List all configured missions or only the given one,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=missionCode,
  type=string,
  description=The code of the mission to list,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new earth observation mission in prosEO,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the mission definitions from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=missionCode,
  type=string,
  description=The code of the mission (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A mission attribute to update in the form "<attribute name>=<attribute value>", overrides values given in the mission definition file,
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update the mission attributes; if the input is not from a file, the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the updated mission definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=attribute,
  type=string,
  description=A mission attribute to update in the form "<attribute name>=<attribute value>", overrides values given in the mission definition file,
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=spacecraft,
  description=Commands to manage the spacecrafts for a mission,
  subcommands=[CLICommand [
  name=add,
  description=Add a spacecraft to the mission list of spacecrafts; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the updated mission definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft to remove (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A spacecraft attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=remove,
  description=Remove a spacecraft from the mission list of spacecrafts,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft to remove,
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=orbit,
  description=Commands for managing orbits for a given spacecraft,
  subcommands=[CLICommand [
  name=show,
  description=Lists orbits, optionally restricted to a given orbit range,
  subcommands=[],
  options=[CLIOption [
  name=from,
  type=integer,
  description=Lower bound of orbit range,
  shortForm=null
], CLIOption [
  name=to,
  type=integer,
  description=Upper bound of orbit range,
  shortForm=null
], CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft the orbits belong to,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Add a set of orbits for the given spacecraft,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the orbit definitions from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft the orbits belong to (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=An orbit attribute to update in the form "<attribute name>=<attribute value>", only allowed if no orbit file is given (i. e. a single orbit is created),
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a set of orbits for the given spacecraft,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the orbit definitions from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft the orbits belong to (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=orbitNumber,
  type=string,
  description=The number of the orbit to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=An orbit attribute to update in the form "<attribute name>=<attribute value>", only allowed if no orbit file is given (i. e. a single orbit is updated),
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Deletes orbits in a given orbit range,
  subcommands=[],
  options=[CLIOption [
  name=from,
  type=integer,
  description=Lower bound of orbit range,
  shortForm=null
], CLIOption [
  name=to,
  type=integer,
  description=Upper bound of orbit range,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft the orbits belong to,
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=order,
  description=Commands for managing processing orders; some commands can only be issued, if the order is in the correct status. Order status sequence is Initial - Approved - Planned - Released - Running - Completed/Failed - Closed. Additionally an order may be in status "Suspending" after issuing a "suspend" command, until all running job steps are finished.,
  subcommands=[CLICommand [
  name=show,
  description=Lists orders, optionally restricted to a given time range or a specific processing order,
  subcommands=[],
  options=[CLIOption [
  name=from,
  type=datetime,
  description=Lower bound of order start time,
  shortForm=null
], CLIOption [
  name=to,
  type=datetime,
  description=Upper bound of order start time,
  shortForm=null
], CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier (overrides --from and --to options),
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new processing order (in status Initial); if the input is not from a file, the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the order definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier for user reference (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=An order attribute to update in the form "<attribute name>=<attribute value>", overrides values given in the order definition file,
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a processing order (only allowed in status Initial),
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the order definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the order definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier for user reference (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=An order attribute to update in the form "<attribute name>=<attribute value>", overrides values given in the order definition file,
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=approve,
  description=Approve the named processing order for planning (must be in status Initial, new status is Approved),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=plan,
  description=Plan the jobs for the named processing order (must be in status Approved, new status is Planned),
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format for the resulting job list (one of { NONE, JSON, XML, YAML }; default value NONE),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
], CLIParameter [
  name=facility,
  type=string,
  description=The processing facility, on which the order shall be run,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=reset,
  description=Reset the named processing order to initial state (must be in status Approved or Planned, new status is Initial),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=release,
  description=Release the jobs of the named processing order for processing (must be in status Planned, new status is Released; order status will change to Running, when execution of the first job step starts; when all job steps are finished, the status will change again to Completed, if all job steps finished successfully, or Failed, if at least one job step failed),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=suspend,
  description=Suspend starting of further jobs for the named processing order (must be in status Released or Running, new status is Suspending, then Planned, when all running job steps are finished),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=resume,
  description=Resume starting of jobs for the named processing order after suspend (order must be in status Planned, new status is Released [actually the same command as "release"]),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=cancel,
  description=Cancel the named processing order (remaining jobs are not executed, order state changes to Failed; order must be in status Planned, i. e. it may be necessary to issue a "suspend" command first),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=close,
  description=Close the named processing order (must be in status Completed or Failed, new status is Closed),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=delete,
  description=Delete the named processing order (only allowed in status Initial or Closed),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=processor,
  description=Commands for managing processor classes, processors, configurations and configured processors,
  subcommands=[CLICommand [
  name=class,
  description=Commands for managing processor classes,
  subcommands=[CLICommand [
  name=show,
  description=Show all processor classes for the current mission or a named one,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor classes to show,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new processor class for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the processor class definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor class to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A processor class attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a processor class for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the processor class definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor classes to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A processor class attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Remove the named processor class from the current mission,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor classes to update (mandatory if not read from file),
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=show,
  description=Show all processor versions for the current mission or only the selected ones,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The class name of the processor to show,
  optional=true,
  repeatable=false
], CLIParameter [
  name=processorVersion,
  type=string,
  description=The version of the processor to show,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new processor version for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the processor version definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The class name of the processor to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=processorVersion,
  type=string,
  description=The version of the processor to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A processor attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a processor version for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the processor version definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the order definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The class name of the processor to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=processorVersion,
  type=string,
  description=The version of the processor to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A processor attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete a processor version from the current mission,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The class name of the processor to delete,
  optional=false,
  repeatable=false
], CLIParameter [
  name=processorVersion,
  type=string,
  description=The version of the processor to delete,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=configuration,
  description=Commands to manage configured processors,
  subcommands=[CLICommand [
  name=show,
  description=Show all configured processor for the current mission or only the ones identified,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=configuredProcessorIdentifier,
  type=string,
  description=The identifier of the configured processor,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new configured processor by combining a processor version and a configuration; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the configured processor definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=configuredProcessorIdentifier,
  type=string,
  description=The identifier of the configured processor,
  optional=true,
  repeatable=false
], CLIParameter [
  name=className,
  type=string,
  description=The class name of the processor (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=processorVersion,
  type=string,
  description=The version of the processor (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=configurationVersion,
  type=string,
  description=The version of the configuration (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A configured processor attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a configured processor; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the configured processor definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=configuredProcessorIdentifier,
  type=string,
  description=The identifier of the configured processor (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A configured processor attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete a configured processor,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=configuredProcessorIdentifier,
  type=string,
  description=The identifier of the configured processor to delete,
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=configuration,
  description=Commands for managing configurations,
  subcommands=[CLICommand [
  name=show,
  description=Show all configurations for the current mission and processor class or a named one,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor classes for the configurations,
  optional=true,
  repeatable=false
], CLIParameter [
  name=configurationVersion,
  type=string,
  description=The configuration versions to show,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new configuration for the current mission and processor class; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the configuration definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor class (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=configurationVersion,
  type=string,
  description=The version of the configuration to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A configuration attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a configuration for the current mission and processor class; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the configuration definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the order definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor class (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=configurationVersion,
  type=string,
  description=The version of the configuration to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A configuration attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Remove a configuration from the current mission and processor class,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor class,
  optional=false,
  repeatable=false
], CLIParameter [
  name=configurationVersion,
  type=string,
  description=The version of the configuration to delete,
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=productclass,
  description=Commands for managing product classes,
  subcommands=[CLICommand [
  name=show,
  description=Show all product classes for the current mission or only the selected ones,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the product class to show,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new product class for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the product class definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the product class name to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A product class attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a product class for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the product class definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the product class definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the product class name to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A product class attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete the named product class from the current mission,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the product class to delete,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=rule,
  description=Commands for managing selection rules,
  subcommands=[CLICommand [
  name=show,
  description=Show all selection rules for the current mission and target product class,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { PLAIN, JSON, XML, YAML }; default value PLAIN [rule language]).,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=targetProductClass,
  type=string,
  description=The product class using the selection rules,
  optional=false,
  repeatable=false
], CLIParameter [
  name=sourceProductClass,
  type=string,
  description=The product class requested by the selection rules,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new selection rule for the given target product class; the user will be prompted for mandatory attributes not given on the command line. If PLAIN format is specified and no file name is given, the user will be prompted to enter the selection rule in Rule Language.,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the selection rule definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { PLAIN, JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=targetProductClass,
  type=string,
  description=The target product class name (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A selection rule attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a selection rule for the given target class and configured processor; the user will be prompted for mandatory attributes not given on the command line. If PLAIN format is specified and no file name is given, the user will be prompted to enter the selection rule in Rule Language. If multiple rules exist for the target product class, the user will be prompted to select the rule to apply the update to.,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the selection rule definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { PLAIN, JSON, XML, YAML }; default value JSON) Note. Only PLAIN format is implemented for the time being.,
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the selection rule definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=targetProductClass,
  type=string,
  description=The target product class name (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A selection rule attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete the selection rule for the given target class,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=targetProductClass,
  type=string,
  description=The product class name of the selection rule,
  optional=true,
  repeatable=false
], CLIParameter [
  name=ruleId,
  type=string,
  description=The database ID of the selection rule to delete,
  optional=true,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=product,
  description=Commands for managing products,
  subcommands=[CLICommand [
  name=show,
  description=Show products for a mission and product class, optionally restricted to a given time range,
  subcommands=[],
  options=[CLIOption [
  name=from,
  type=datetime,
  description=Lower bound of sensing start time,
  shortForm=null
], CLIOption [
  name=to,
  type=datetime,
  description=Upper bound of sensing start time,
  shortForm=null
], CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the product class to show,
  optional=false,
  repeatable=true
]]
], CLICommand [
  name=create,
  description=Create a new product for the current mission and product class; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the product definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The class name of the product to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A product attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a product for the current mission and product class; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the product definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the product definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=id,
  type=integer,
  description=The database ID of the product to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A product attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete the product with the given database ID,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=id,
  type=integer,
  description=The database ID of the product to delete,
  optional=true,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=ingest,
  description=Ingest all products into the storage manager of the given processing facility,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the ingested products from (mandatory),
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=processingFacility,
  type=string,
  description=The name of the facility to ingest the products to,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=user,
  description=Commands for managing users (note that user names are stored with a mission prefix in the user database, but the mission prefix is not used in the command-line interface),
  subcommands=[CLICommand [
  name=show,
  description=Show user accounts for the current mission,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
], CLIOption [
  name=verbose,
  type=boolean,
  description=If set, give user details, otherwise show usernames only (setting username parameter implies verbose),
  shortForm=v
]],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to show (without mission prefix),
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new user account within the given mission,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the user account definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=mission,
  type=string,
  description=The mission to create the user for (only valid if not yet logged in into a mission; basically intended for creating a single user with "ROLE_USERMGR" for a new mission),
  shortForm=m
]],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to create (without mission prefix; mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A user attribute to set in the form "<attribute name>=<attribute value>" (if a password is specified here, it must be unencrypted, while in the file it must be encrypted),
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update the given user account; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the user account definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the user account definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to update (without mission prefix; mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A user account attribute to set in the form "<attribute name>=<attribute value>" (if a password is specified here, it must be unencrypted, while in the file it must be encrypted),
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete the user account with the given name,
  subcommands=[],
  options=[CLIOption [
  name=mission,
  type=string,
  description=The mission to delete the user from (only valid if not yet logged in into a mission; basically intended for removing the last user with "ROLE_USERMGR" from a mission before deletion),
  shortForm=m
]],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to delete (without mission prefix),
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=enable,
  description=Enable the user account with the given name,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to enable (without mission prefix),
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=disable,
  description=Disable the user account with the given name,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to disable (without mission prefix),
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=grant,
  description=Grant authorities for the current mission directly to the user (not recommended, use of group authorities recommended),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to grant authorities to (without mission prefix; mandatory if not read from file),
  optional=false,
  repeatable=false
], CLIParameter [
  name=authority,
  type=string,
  description=An authority to grant (multiple authorities allowed),
  optional=false,
  repeatable=true
]]
], CLICommand [
  name=revoke,
  description=Revoke authorities for the current mission from the user (directly granted authorities only),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to revoke authorities from (without mission prefix; mandatory if not read from file),
  optional=false,
  repeatable=false
], CLIParameter [
  name=authority,
  type=string,
  description=An authority to revoke (multiple authorities allowed),
  optional=false,
  repeatable=true
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=group,
  description=Commands for managing groups (note that group names are stored with a mission prefix in the user database, but the mission prefix is not used in the command-line interface),
  subcommands=[CLICommand [
  name=show,
  description=Show user groups for the current mission,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
], CLIOption [
  name=verbose,
  type=boolean,
  description=If set, give user group details, otherwise show group names only (setting group name parameter implies verbose),
  shortForm=v
]],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to show (without mission prefix),
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new user group within the given mission,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the user group definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to create (without mission prefix; mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A group attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update the given user group; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the user group definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the user group definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to update (without mission prefix; mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A user group attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete the group account with the given name,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to delete (without mission prefix),
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=grant,
  description=Grant authorities for the current mission to the user group,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to grant authorities to (without mission prefix),
  optional=false,
  repeatable=false
], CLIParameter [
  name=authority,
  type=string,
  description=An authority to grant (multiple authorities allowed),
  optional=false,
  repeatable=true
]]
], CLICommand [
  name=revoke,
  description=Revoke authorities for the current mission from the user group,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to revoke authorities from (without mission prefix),
  optional=false,
  repeatable=false
], CLIParameter [
  name=authority,
  type=string,
  description=An authority to revoke (multiple authorities allowed),
  optional=false,
  repeatable=true
]]
], CLICommand [
  name=members,
  description=List the user accounts of a user group (for the current mission only, users may have different group associations in different missions),
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
], CLIOption [
  name=verbose,
  type=boolean,
  description=If set, give user details, otherwise show user names only,
  shortForm=v
]],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to list the users for (without mission prefix),
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=add,
  description=Add user accounts to the user group (for the current mission only, users may have different group associations in different missions),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to add users to (without mission prefix),
  optional=false,
  repeatable=false
], CLIParameter [
  name=userName,
  type=string,
  description=The name of a user account to add (without mission prefix; multiple user names allowed),
  optional=false,
  repeatable=true
]]
], CLICommand [
  name=remove,
  description=Remove user accounts from the user group (for the current mission only),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to remove users from (without mission prefix),
  optional=false,
  repeatable=false
], CLIParameter [
  name=userName,
  type=string,
  description=The name of a user account to add (without mission prefix; multiple user names allowed),
  optional=false,
  repeatable=true
]]
]],
  options=[],
  parameters=[]
]]
]
2020-03-25 21:31:53.610  WARN 13404 --- [main] org.jline                                : Unable to create a system terminal, creating a dumb terminal (enable debug logging for more information)
2020-03-25 21:31:53.677 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parse(login -usysadm -psysadm)
2020-03-25 21:31:53.677 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseOption(-usysadm, login)
2020-03-25 21:31:53.677 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseMultipleModalOptions(-usysadm, login)
2020-03-25 21:31:53.677 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseOption()
2020-03-25 21:31:53.677 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseOption(-psysadm, login)
2020-03-25 21:31:53.677 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseMultipleModalOptions(-psysadm, login)
2020-03-25 21:31:53.677 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseOption()
2020-03-25 21:31:53.677 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parse()
2020-03-25 21:31:53.677 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : ... received command 'login'
2020-03-25 21:31:53.677 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> executeCommand(login)
2020-03-25 21:31:53.678 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.LoginManager    : >>> doLogin(sysadm, ********, null)
2020-03-25 21:31:53.678 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.LoginManager    : >>> login(sysadm, ********, null)
2020-03-25 21:31:53.678 TRACE 13404 --- [main] d.d.proseo.ui.backend.ServiceConnection  : >>> getFromService(http://localhost:8086/proseo/user-mgr/v0.1, /login, interface java.util.List, user, password)
2020-03-25 21:31:53.853 TRACE 13404 --- [main] d.d.proseo.ui.backend.ServiceConnection  : ... calling service URL http://localhost:8086/proseo/user-mgr/v0.1/login with GET
2020-03-25 21:31:54.066 TRACE 13404 --- [main] d.d.proseo.ui.backend.ServiceConnection  : <<< getFromService()
2020-03-25 21:31:54.066 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2821, [sysadm])
2020-03-25 21:31:54.066  INFO 13404 --- [main] de.dlr.proseo.ui.backend.LoginManager    : (I2821) User sysadm logged in
2020-03-25 21:31:54.066 DEBUG 13404 --- [main] de.dlr.proseo.ui.backend.LoginManager    : ... with authorities: [ROLE_ROOT]
2020-03-25 21:31:54.066 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.LoginManager    : <<< doLogin()
2020-03-25 21:31:54.066 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< executeCommand({})
2020-03-25 21:31:54.070 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parse(mission create --file=PTM.json)
2020-03-25 21:31:54.070 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseOption(--file=PTM.json, create)
2020-03-25 21:31:54.070 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseOption()
2020-03-25 21:31:54.070 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parse()
2020-03-25 21:31:54.070 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : ... received command 'mission'
2020-03-25 21:31:54.070 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> executeCommand(mission)
2020-03-25 21:31:54.070 TRACE 13404 --- [main] d.d.proseo.ui.cli.MissionCommandRunner   : >>> executeCommand(mission)
2020-03-25 21:31:54.070 TRACE 13404 --- [main] d.d.proseo.ui.cli.MissionCommandRunner   : >>> createMission(create)
2020-03-25 21:31:54.072 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.CLIUtil             : >>> parseObjectFile(PTM.json, JSON, class de.dlr.proseo.model.rest.model.RestMission)
2020-03-25 21:31:54.108 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2831, [JSON, PTM.json, Unrecognized character escape '$' (code 36)
 at [Source: (File); line: 6, column: 28] (through reference chain: de.dlr.proseo.model.rest.model.RestMission["productFileTemplate"])])
2020-03-25 21:31:54.108 ERROR 13404 --- [main] de.dlr.proseo.ui.cli.CLIUtil             : (E2831) JSON content of file PTM.json invalid for object generation (cause: Unrecognized character escape '$' (code 36)
 at [Source: (File); line: 6, column: 28] (through reference chain: de.dlr.proseo.model.rest.model.RestMission["productFileTemplate"]))
2020-03-25 21:31:54.108 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2806, [(E2831) JSON content of file PTM.json invalid for object generation (cause: Unrecognized character escape '$' (code 36)
 at [Source: (File); line: 6, column: 28] (through reference chain: de.dlr.proseo.model.rest.model.RestMission["productFileTemplate"]))])
2020-03-25 21:31:54.108 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< executeCommand({})
2020-03-25 21:31:54.115 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parse(user create --mission=PTM usermgr password=usermgr authorities=ROLE_USERMGR)
2020-03-25 21:31:54.115 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseOption(--mission=PTM, create)
2020-03-25 21:31:54.115 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseOption()
2020-03-25 21:31:54.115 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseParameter(usermgr, 0, create)
2020-03-25 21:31:54.116 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseParameter()
2020-03-25 21:31:54.116 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseParameter(password=usermgr, 1, create)
2020-03-25 21:31:54.116 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseParameter()
2020-03-25 21:31:54.116 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseParameter(authorities=ROLE_USERMGR, 2, create)
2020-03-25 21:31:54.116 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseParameter()
2020-03-25 21:31:54.116 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parse()
2020-03-25 21:31:54.116 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : ... received command 'user'
2020-03-25 21:31:54.116 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> executeCommand(user)
2020-03-25 21:31:54.116 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.UserCommandRunner   : >>> executeCommand(user)
2020-03-25 21:31:54.116 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.UserCommandRunner   : >>> createUser(CLICommand [
  name=create,
  subcommand=null,
  options=[ParsedOption [
  name=mission,
  type=string,
  value=PTM
]],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  value=usermgr
], CLIParameter [
  name=attribute,
  type=string,
  value=password=usermgr
], CLIParameter [
  name=attribute,
  type=string,
  value=authorities=ROLE_USERMGR
]]
])
2020-03-25 21:31:54.116 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.CLIUtil             : >>> setAttribute(class de.dlr.proseo.model.rest.model.RestUser, password=usermgr)
2020-03-25 21:31:54.116 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.CLIUtil             : >>> setAttribute(class de.dlr.proseo.model.rest.model.RestUser, authorities=ROLE_USERMGR)
2020-03-25 21:31:54.135 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.UserCommandRunner   : ... creating user from REST data: {"username":"PTM-usermgr","password":"usermgr","enabled":true,"authorities":["ROLE_USERMGR"],"expirationDate":null,"passwordExpirationDate":null}
2020-03-25 21:31:54.135 TRACE 13404 --- [main] d.d.proseo.ui.backend.ServiceConnection  : >>> postToService(http://localhost:8086/proseo/user-mgr/v0.1, /users, object, user, password)
2020-03-25 21:31:54.142 TRACE 13404 --- [main] d.d.proseo.ui.backend.ServiceConnection  : ... calling service URL http://localhost:8086/proseo/user-mgr/v0.1/users with POST
2020-03-25 21:31:54.465 TRACE 13404 --- [main] d.d.proseo.ui.backend.ServiceConnection  : <<< getFromService()
2020-03-25 21:31:54.465 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2701, [PTM-usermgr])
2020-03-25 21:31:54.465  INFO 13404 --- [main] de.dlr.proseo.ui.cli.UserCommandRunner   : (I2701) User account PTM-usermgr created
2020-03-25 21:31:54.465 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< executeCommand({})
2020-03-25 21:31:54.468 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parse(login --user=usermgr --password=usermgr PTM)
2020-03-25 21:31:54.468 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseOption(--user=usermgr, login)
2020-03-25 21:31:54.468 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseOption()
2020-03-25 21:31:54.468 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseOption(--password=usermgr, login)
2020-03-25 21:31:54.468 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseOption()
2020-03-25 21:31:54.468 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseParameter(PTM, 0, login)
2020-03-25 21:31:54.468 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseParameter()
2020-03-25 21:31:54.468 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parse()
2020-03-25 21:31:54.468 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : ... received command 'login'
2020-03-25 21:31:54.468 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> executeCommand(login)
2020-03-25 21:31:54.468 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.LoginManager    : >>> doLogin(usermgr, ********, PTM)
2020-03-25 21:31:54.468 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.LoginManager    : >>> login(PTM-usermgr, ********, PTM)
2020-03-25 21:31:54.468 TRACE 13404 --- [main] d.d.proseo.ui.backend.ServiceConnection  : >>> getFromService(http://localhost:8086/proseo/user-mgr/v0.1, /login?mission=PTM, interface java.util.List, user, password)
2020-03-25 21:31:54.473 TRACE 13404 --- [main] d.d.proseo.ui.backend.ServiceConnection  : ... calling service URL http://localhost:8086/proseo/user-mgr/v0.1/login?mission=PTM with GET
2020-03-25 21:31:54.495 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2812, [PTM-usermgr])
2020-03-25 21:31:54.496 ERROR 13404 --- [main] d.d.proseo.ui.backend.ServiceConnection  : (E2812) User PTM-usermgr not authorized for requested service

org.springframework.web.client.HttpClientErrorException$Unauthorized: 401 
	at org.springframework.web.client.HttpClientErrorException.create(HttpClientErrorException.java:81)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:122)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:102)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:778)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:736)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:670)
	at org.springframework.web.client.RestTemplate.getForEntity(RestTemplate.java:338)
	at de.dlr.proseo.ui.backend.ServiceConnection.getFromService(ServiceConnection.java:85)
	at de.dlr.proseo.ui.backend.LoginManager.login(LoginManager.java:67)
	at de.dlr.proseo.ui.backend.LoginManager.doLogin(LoginManager.java:122)
	at de.dlr.proseo.ui.cli.CommandLineInterface.executeCommand(CommandLineInterface.java:178)
	at de.dlr.proseo.ui.cli.CommandLineInterface.run(CommandLineInterface.java:301)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:779)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:763)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202)
	at de.dlr.proseo.ui.cli.CommandLineInterface.main(CommandLineInterface.java:314)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:47)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:86)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:50)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51)

2020-03-25 21:31:54.497 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.LoginManager    : Caught HttpClientErrorException 401 
2020-03-25 21:31:54.497 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2826, [PTM-usermgr, PTM])
2020-03-25 21:31:54.497 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2822, [usermgr])
2020-03-25 21:31:54.497 ERROR 13404 --- [main] de.dlr.proseo.ui.backend.LoginManager    : (E2822) Login for user usermgr failed
2020-03-25 21:31:54.497 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.LoginManager    : <<< doLogin()
2020-03-25 21:31:54.497 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< executeCommand({})
2020-03-25 21:31:54.500 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parse(user create proseo password=proseo)
2020-03-25 21:31:54.500 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseParameter(proseo, 0, create)
2020-03-25 21:31:54.500 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseParameter()
2020-03-25 21:31:54.500 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseParameter(password=proseo, 1, create)
2020-03-25 21:31:54.500 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseParameter()
2020-03-25 21:31:54.500 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parse()
2020-03-25 21:31:54.500 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : ... received command 'user'
2020-03-25 21:31:54.500 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> executeCommand(user)
2020-03-25 21:31:54.500 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.UserCommandRunner   : >>> executeCommand(user)
2020-03-25 21:31:54.500 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.UserCommandRunner   : >>> createUser(CLICommand [
  name=create,
  subcommand=null,
  options=[],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  value=proseo
], CLIParameter [
  name=attribute,
  type=string,
  value=password=proseo
]]
])
2020-03-25 21:31:54.500 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.CLIUtil             : >>> setAttribute(class de.dlr.proseo.model.rest.model.RestUser, password=proseo)
2020-03-25 21:31:54.502 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.UserCommandRunner   : ... creating user from REST data: {"username":"proseo","password":"proseo","enabled":true,"authorities":[],"expirationDate":null,"passwordExpirationDate":null}
2020-03-25 21:31:54.502 TRACE 13404 --- [main] d.d.proseo.ui.backend.ServiceConnection  : >>> postToService(http://localhost:8086/proseo/user-mgr/v0.1, /users, object, user, password)
2020-03-25 21:31:54.508 TRACE 13404 --- [main] d.d.proseo.ui.backend.ServiceConnection  : ... calling service URL http://localhost:8086/proseo/user-mgr/v0.1/users with POST
2020-03-25 21:31:54.593 TRACE 13404 --- [main] d.d.proseo.ui.backend.ServiceConnection  : <<< getFromService()
2020-03-25 21:31:54.593 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2701, [proseo])
2020-03-25 21:31:54.593  INFO 13404 --- [main] de.dlr.proseo.ui.cli.UserCommandRunner   : (I2701) User account proseo created
2020-03-25 21:31:54.594 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< executeCommand({})
2020-03-25 21:31:54.596 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parse(group create oper authorities=ROLE_USER)
2020-03-25 21:31:54.597 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseParameter(oper, 0, create)
2020-03-25 21:31:54.597 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseParameter()
2020-03-25 21:31:54.597 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseParameter(authorities=ROLE_USER, 1, create)
2020-03-25 21:31:54.597 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseParameter()
2020-03-25 21:31:54.597 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parse()
2020-03-25 21:31:54.597 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : ... received command 'group'
2020-03-25 21:31:54.597 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> executeCommand(group)
2020-03-25 21:31:54.597 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.UserCommandRunner   : >>> executeCommand(group)
2020-03-25 21:31:54.597 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.UserCommandRunner   : >>> createGroup(CLICommand [
  name=create,
  subcommand=null,
  options=[],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  value=oper
], CLIParameter [
  name=attribute,
  type=string,
  value=authorities=ROLE_USER
]]
])
2020-03-25 21:31:54.597 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.CLIUtil             : >>> setAttribute(class de.dlr.proseo.model.rest.model.RestGroup, authorities=ROLE_USER)
2020-03-25 21:31:54.597 TRACE 13404 --- [main] d.d.proseo.ui.backend.ServiceConnection  : >>> postToService(http://localhost:8086/proseo/user-mgr/v0.1, /groups, object, user, password)
2020-03-25 21:31:54.602 TRACE 13404 --- [main] d.d.proseo.ui.backend.ServiceConnection  : ... calling service URL http://localhost:8086/proseo/user-mgr/v0.1/groups with POST
2020-03-25 21:31:54.726 TRACE 13404 --- [main] d.d.proseo.ui.backend.ServiceConnection  : <<< getFromService()
2020-03-25 21:31:54.726 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2717, [null-oper])
2020-03-25 21:31:54.726  INFO 13404 --- [main] de.dlr.proseo.ui.cli.UserCommandRunner   : (I2717) User group null-oper created
2020-03-25 21:31:54.726 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< executeCommand({})
2020-03-25 21:31:54.730 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parse(login --user=proseo --password=proseo PTM)
2020-03-25 21:31:54.731 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseOption(--user=proseo, login)
2020-03-25 21:31:54.731 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseOption()
2020-03-25 21:31:54.731 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseOption(--password=proseo, login)
2020-03-25 21:31:54.731 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseOption()
2020-03-25 21:31:54.731 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseParameter(PTM, 0, login)
2020-03-25 21:31:54.731 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseParameter()
2020-03-25 21:31:54.731 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parse()
2020-03-25 21:31:54.731 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : ... received command 'login'
2020-03-25 21:31:54.731 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> executeCommand(login)
2020-03-25 21:31:54.731 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.LoginManager    : >>> doLogin(proseo, ********, PTM)
2020-03-25 21:31:54.731 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.LoginManager    : >>> login(PTM-proseo, ********, PTM)
2020-03-25 21:31:54.731 TRACE 13404 --- [main] d.d.proseo.ui.backend.ServiceConnection  : >>> getFromService(http://localhost:8086/proseo/user-mgr/v0.1, /login?mission=PTM, interface java.util.List, user, password)
2020-03-25 21:31:54.738 TRACE 13404 --- [main] d.d.proseo.ui.backend.ServiceConnection  : ... calling service URL http://localhost:8086/proseo/user-mgr/v0.1/login?mission=PTM with GET
2020-03-25 21:31:54.808 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2812, [PTM-proseo])
2020-03-25 21:31:54.808 ERROR 13404 --- [main] d.d.proseo.ui.backend.ServiceConnection  : (E2812) User PTM-proseo not authorized for requested service

org.springframework.web.client.HttpClientErrorException$Unauthorized: 401 
	at org.springframework.web.client.HttpClientErrorException.create(HttpClientErrorException.java:81)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:122)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:102)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:778)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:736)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:670)
	at org.springframework.web.client.RestTemplate.getForEntity(RestTemplate.java:338)
	at de.dlr.proseo.ui.backend.ServiceConnection.getFromService(ServiceConnection.java:85)
	at de.dlr.proseo.ui.backend.LoginManager.login(LoginManager.java:67)
	at de.dlr.proseo.ui.backend.LoginManager.doLogin(LoginManager.java:122)
	at de.dlr.proseo.ui.cli.CommandLineInterface.executeCommand(CommandLineInterface.java:178)
	at de.dlr.proseo.ui.cli.CommandLineInterface.run(CommandLineInterface.java:301)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:779)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:763)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202)
	at de.dlr.proseo.ui.cli.CommandLineInterface.main(CommandLineInterface.java:314)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:47)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:86)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:50)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51)

2020-03-25 21:31:54.809 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.LoginManager    : Caught HttpClientErrorException 401 
2020-03-25 21:31:54.809 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2826, [PTM-proseo, PTM])
2020-03-25 21:31:54.809 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2822, [proseo])
2020-03-25 21:31:54.809 ERROR 13404 --- [main] de.dlr.proseo.ui.backend.LoginManager    : (E2822) Login for user proseo failed
2020-03-25 21:31:54.809 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.LoginManager    : <<< doLogin()
2020-03-25 21:31:54.809 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< executeCommand({})
2020-03-25 21:31:54.810 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parse(orbit create --file=PTM_orbits.json)
2020-03-25 21:31:54.811 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseOption(--file=PTM_orbits.json, create)
2020-03-25 21:31:54.811 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseOption()
2020-03-25 21:31:54.811 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parse()
2020-03-25 21:31:54.811 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : ... received command 'orbit'
2020-03-25 21:31:54.811 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> executeCommand(orbit)
2020-03-25 21:31:54.811 TRACE 13404 --- [main] d.d.proseo.ui.cli.MissionCommandRunner   : >>> executeCommand(orbit)
2020-03-25 21:31:54.811 TRACE 13404 --- [main] d.d.proseo.ui.cli.MissionCommandRunner   : >>> createOrbit(create)
2020-03-25 21:31:54.811 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.CLIUtil             : >>> parseObjectFile(PTM_orbits.json, JSON, interface java.util.List)
2020-03-25 21:31:54.812 TRACE 13404 --- [main] d.d.proseo.ui.backend.ServiceConnection  : >>> postToService(http://localhost:8082/proseo/order-mgr/v0.1, /orbits, object, user, password)
2020-03-25 21:31:54.817 TRACE 13404 --- [main] d.d.proseo.ui.backend.ServiceConnection  : ... calling service URL http://localhost:8082/proseo/order-mgr/v0.1/orbits with POST
2020-03-25 21:31:55.393 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2810, [500 ])
2020-03-25 21:31:55.393 ERROR 13404 --- [main] d.d.proseo.ui.backend.ServiceConnection  : (E2810) HTTP request failed (cause: 500 )

org.springframework.web.client.HttpServerErrorException$InternalServerError: 500 
	at org.springframework.web.client.HttpServerErrorException.create(HttpServerErrorException.java:79)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:124)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:102)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:778)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:736)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:670)
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:445)
	at de.dlr.proseo.ui.backend.ServiceConnection.postToService(ServiceConnection.java:191)
	at de.dlr.proseo.ui.cli.MissionCommandRunner.createOrbit(MissionCommandRunner.java:739)
	at de.dlr.proseo.ui.cli.MissionCommandRunner.executeCommand(MissionCommandRunner.java:1196)
	at de.dlr.proseo.ui.cli.CommandLineInterface.executeCommand(CommandLineInterface.java:199)
	at de.dlr.proseo.ui.cli.CommandLineInterface.run(CommandLineInterface.java:301)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:779)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:763)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202)
	at de.dlr.proseo.ui.cli.CommandLineInterface.main(CommandLineInterface.java:314)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:47)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:86)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:50)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51)

2020-03-25 21:31:55.393 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2806, [(E2810) HTTP request failed (cause: 500 ); nested exception is org.springframework.web.client.HttpServerErrorException$InternalServerError: 500 ])
2020-03-25 21:31:55.393 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< executeCommand({})
2020-03-25 21:31:55.395 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parse(processor class create --file=PTM_PTML1B.json)
2020-03-25 21:31:55.395 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseOption(--file=PTM_PTML1B.json, create)
2020-03-25 21:31:55.395 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseOption()
2020-03-25 21:31:55.395 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parse()
2020-03-25 21:31:55.395 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : ... received command 'processor'
2020-03-25 21:31:55.395 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> executeCommand(processor)
2020-03-25 21:31:55.395 TRACE 13404 --- [main] d.d.p.ui.cli.ProcessorCommandRunner      : >>> executeCommand(processor)
2020-03-25 21:31:55.396 TRACE 13404 --- [main] d.d.p.ui.cli.ProcessorCommandRunner      : >>> createProcessorClass(create)
2020-03-25 21:31:55.396 TRACE 13404 --- [main] de.dlr.proseo.ui.cli.CLIUtil             : >>> parseObjectFile(PTM_PTML1B.json, JSON, class de.dlr.proseo.model.rest.model.RestProcessorClass)
2020-03-25 21:31:55.399  INFO 13404 --- [main] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-03-25 21:31:55.400 ERROR 13404 --- [main] o.s.boot.SpringApplication               : Application run failed

java.lang.IllegalStateException: Failed to execute CommandLineRunner
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:782)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:763)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202)
	at de.dlr.proseo.ui.cli.CommandLineInterface.main(CommandLineInterface.java:314)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:47)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:86)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:50)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51)
Caused by: java.lang.NullPointerException: null
	at de.dlr.proseo.ui.cli.ProcessorCommandRunner.createProcessorClass(ProcessorCommandRunner.java:160)
	at de.dlr.proseo.ui.cli.ProcessorCommandRunner.executeCommand(ProcessorCommandRunner.java:1873)
	at de.dlr.proseo.ui.cli.CommandLineInterface.executeCommand(CommandLineInterface.java:195)
	at de.dlr.proseo.ui.cli.CommandLineInterface.run(CommandLineInterface.java:301)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:779)
	... 13 common frames omitted

2020-03-25 21:31:55.404 TRACE 13404 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2925, [Failed to execute CommandLineRunner])
2020-03-25 21:31:55.404 ERROR 13404 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : (E2925) prosEO Command Line Interface terminated by exception: Failed to execute CommandLineRunner

java.lang.IllegalStateException: Failed to execute CommandLineRunner
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:782)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:763)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202)
	at de.dlr.proseo.ui.cli.CommandLineInterface.main(CommandLineInterface.java:314)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:47)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:86)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:50)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51)
Caused by: java.lang.NullPointerException: null
	at de.dlr.proseo.ui.cli.ProcessorCommandRunner.createProcessorClass(ProcessorCommandRunner.java:160)
	at de.dlr.proseo.ui.cli.ProcessorCommandRunner.executeCommand(ProcessorCommandRunner.java:1873)
	at de.dlr.proseo.ui.cli.CommandLineInterface.executeCommand(CommandLineInterface.java:195)
	at de.dlr.proseo.ui.cli.CommandLineInterface.run(CommandLineInterface.java:301)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:779)
	... 13 common frames omitted

2020-03-25 21:37:32.544  INFO 13419 --- [main] d.d.proseo.ui.cli.CommandLineInterface   : Starting CommandLineInterface v0.1.0 on localhost with PID 13419 (/Users/thomas/Documents/Thomas Beruf/Managementberatung/30 Kunden/DLR-EOC/Copernicus/S5P/S5P Processing Subsystem/prosEO/ui/cli/target/proseo-ui-cli.jar started by thomas in /Users/thomas/Documents/Thomas Beruf/Managementberatung/30 Kunden/DLR-EOC/Copernicus/S5P/S5P Processing Subsystem/prosEO/samples/testdata)
2020-03-25 21:37:32.546 DEBUG 13419 --- [main] d.d.proseo.ui.cli.CommandLineInterface   : Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2020-03-25 21:37:32.546  INFO 13419 --- [main] d.d.proseo.ui.cli.CommandLineInterface   : No active profile set, falling back to default profiles: default
2020-03-25 21:37:33.791  INFO 13419 --- [main] d.d.proseo.ui.cli.CommandLineInterface   : Started CommandLineInterface in 1.73 seconds (JVM running for 2.096)
2020-03-25 21:37:33.792 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> run({})
2020-03-25 21:37:33.794 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLISyntax    : >>> fromSyntaxFile(ui-cli-syntax.yml)
2020-03-25 21:37:33.854 TRACE 13419 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> UIMessages::<init>
2020-03-25 21:37:33.857 TRACE 13419 --- [main] de.dlr.proseo.ui.backend.UIMessages      : ... number of messages found: 183
2020-03-25 21:37:33.857 TRACE 13419 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2900, [ui-cli-syntax.yml])
2020-03-25 21:37:33.857  INFO 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLISyntax    : (I2900) Command line syntax loaded from syntax file ui-cli-syntax.yml
2020-03-25 21:37:33.858 DEBUG 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLISyntax    : Syntax definition: CLISyntax [
  title=prosEO UI Command Line Interface Syntax,
  version=v0.1,
  description=Commands can be entered after the "prosEO>" command prompt. They can also be invoked on the shell command line 
following the name of the prosEO executable (e. g. "proseo") and at least one whitespace character.

Commands may have subcommands, which precede all options and parameters.

Commands may have options (--option, a short form -o may be given as alias) and parameters
(passed as values without the parameter name).

Modal options can be combined into one option, i. e. "-a -b -c" is the same as "-abc".
Options with values are either of the form "-ovalue" or "--option=value";
in the case of multiple values "--option=value,value,value".

Parameters are positional, except (implicitly) for attribute parameters of the form "<attribute name>=<attribute value>".
Attribute values may be comma-separated string lists, but they cannot represent attributes of more complex types. To set
complex object attributes use the "--file" option and pass a Json, XML or Yaml file.

All date-time values must conform to the ISO date-time format ("YYYY-MM-DDTHH:MM:SS").

So the general syntax is:
command [subcommand...] [option...] [parameter...]

Caution: Typing ^C (Control-C) terminates the Command Line Interface immediately.
,
  globalOptions=[CLIOption [
  name=help,
  type=boolean,
  description=Show help information for the current command/subcommand level (top level commands, when called from the shell command line),
  shortForm=h
]],
  options=[CLIOption [
  name=version,
  type=boolean,
  description=Show the prosEO CLI version and exit (only for call from shell command line),
  shortForm=V
], CLIOption [
  name=user,
  type=string,
  description=The user name for login to prosEO.,
  shortForm=u
], CLIOption [
  name=password,
  type=string,
  description=The password for login to prosEO (only valid if a user name for login is given).,
  shortForm=p
], CLIOption [
  name=mission,
  type=string,
  description=The mission to login to (only valid if a user name for login is given),
  shortForm=m
]],
  commands=[CLICommand [
  name=exit,
  description=Terminate the Command Line Interface,
  subcommands=[],
  options=[],
  parameters=[]
], CLICommand [
  name=help,
  description=Show the prosEO Command Line Interface help information (this page; for subcommand help, type "<subcommand> --help"),
  subcommands=[],
  options=[],
  parameters=[]
], CLICommand [
  name=login,
  description=Log in to a mission in prosEO. All valid commands except for "mission show" require prior login.,
  subcommands=[],
  options=[CLIOption [
  name=user,
  type=string,
  description=User name,
  shortForm=u
], CLIOption [
  name=password,
  type=string,
  description=The user's password,
  shortForm=p
]],
  parameters=[CLIParameter [
  name=missionCode,
  type=string,
  description=The code of the mission to log in to (may be empty for user with prosEO Administrator privileges),
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=logout,
  description=Log out of prosEO. No commands except "mission show" and "login" will be accepted after logout.,
  subcommands=[],
  options=[],
  parameters=[]
], CLICommand [
  name=mission,
  description=Commands related to configuring an earth observation mission,
  subcommands=[CLICommand [
  name=show,
  description=List all configured missions or only the given one,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=missionCode,
  type=string,
  description=The code of the mission to list,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new earth observation mission in prosEO,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the mission definitions from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=missionCode,
  type=string,
  description=The code of the mission (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A mission attribute to update in the form "<attribute name>=<attribute value>", overrides values given in the mission definition file,
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update the mission attributes; if the input is not from a file, the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the updated mission definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=attribute,
  type=string,
  description=A mission attribute to update in the form "<attribute name>=<attribute value>", overrides values given in the mission definition file,
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=spacecraft,
  description=Commands to manage the spacecrafts for a mission,
  subcommands=[CLICommand [
  name=add,
  description=Add a spacecraft to the mission list of spacecrafts; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the updated mission definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft to remove (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A spacecraft attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=remove,
  description=Remove a spacecraft from the mission list of spacecrafts,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft to remove,
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=orbit,
  description=Commands for managing orbits for a given spacecraft,
  subcommands=[CLICommand [
  name=show,
  description=Lists orbits, optionally restricted to a given orbit range,
  subcommands=[],
  options=[CLIOption [
  name=from,
  type=integer,
  description=Lower bound of orbit range,
  shortForm=null
], CLIOption [
  name=to,
  type=integer,
  description=Upper bound of orbit range,
  shortForm=null
], CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft the orbits belong to,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Add a set of orbits for the given spacecraft,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the orbit definitions from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft the orbits belong to (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=An orbit attribute to update in the form "<attribute name>=<attribute value>", only allowed if no orbit file is given (i. e. a single orbit is created),
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a set of orbits for the given spacecraft,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the orbit definitions from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft the orbits belong to (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=orbitNumber,
  type=string,
  description=The number of the orbit to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=An orbit attribute to update in the form "<attribute name>=<attribute value>", only allowed if no orbit file is given (i. e. a single orbit is updated),
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Deletes orbits in a given orbit range,
  subcommands=[],
  options=[CLIOption [
  name=from,
  type=integer,
  description=Lower bound of orbit range,
  shortForm=null
], CLIOption [
  name=to,
  type=integer,
  description=Upper bound of orbit range,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft the orbits belong to,
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=order,
  description=Commands for managing processing orders; some commands can only be issued, if the order is in the correct status. Order status sequence is Initial - Approved - Planned - Released - Running - Completed/Failed - Closed. Additionally an order may be in status "Suspending" after issuing a "suspend" command, until all running job steps are finished.,
  subcommands=[CLICommand [
  name=show,
  description=Lists orders, optionally restricted to a given time range or a specific processing order,
  subcommands=[],
  options=[CLIOption [
  name=from,
  type=datetime,
  description=Lower bound of order start time,
  shortForm=null
], CLIOption [
  name=to,
  type=datetime,
  description=Upper bound of order start time,
  shortForm=null
], CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier (overrides --from and --to options),
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new processing order (in status Initial); if the input is not from a file, the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the order definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier for user reference (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=An order attribute to update in the form "<attribute name>=<attribute value>", overrides values given in the order definition file,
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a processing order (only allowed in status Initial),
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the order definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the order definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier for user reference (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=An order attribute to update in the form "<attribute name>=<attribute value>", overrides values given in the order definition file,
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=approve,
  description=Approve the named processing order for planning (must be in status Initial, new status is Approved),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=plan,
  description=Plan the jobs for the named processing order (must be in status Approved, new status is Planned),
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format for the resulting job list (one of { NONE, JSON, XML, YAML }; default value NONE),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
], CLIParameter [
  name=facility,
  type=string,
  description=The processing facility, on which the order shall be run,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=reset,
  description=Reset the named processing order to initial state (must be in status Approved or Planned, new status is Initial),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=release,
  description=Release the jobs of the named processing order for processing (must be in status Planned, new status is Released; order status will change to Running, when execution of the first job step starts; when all job steps are finished, the status will change again to Completed, if all job steps finished successfully, or Failed, if at least one job step failed),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=suspend,
  description=Suspend starting of further jobs for the named processing order (must be in status Released or Running, new status is Suspending, then Planned, when all running job steps are finished),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=resume,
  description=Resume starting of jobs for the named processing order after suspend (order must be in status Planned, new status is Released [actually the same command as "release"]),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=cancel,
  description=Cancel the named processing order (remaining jobs are not executed, order state changes to Failed; order must be in status Planned, i. e. it may be necessary to issue a "suspend" command first),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=close,
  description=Close the named processing order (must be in status Completed or Failed, new status is Closed),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=delete,
  description=Delete the named processing order (only allowed in status Initial or Closed),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=processor,
  description=Commands for managing processor classes, processors, configurations and configured processors,
  subcommands=[CLICommand [
  name=class,
  description=Commands for managing processor classes,
  subcommands=[CLICommand [
  name=show,
  description=Show all processor classes for the current mission or a named one,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor classes to show,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new processor class for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the processor class definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor class to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A processor class attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a processor class for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the processor class definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor classes to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A processor class attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Remove the named processor class from the current mission,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor classes to update (mandatory if not read from file),
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=show,
  description=Show all processor versions for the current mission or only the selected ones,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The class name of the processor to show,
  optional=true,
  repeatable=false
], CLIParameter [
  name=processorVersion,
  type=string,
  description=The version of the processor to show,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new processor version for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the processor version definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The class name of the processor to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=processorVersion,
  type=string,
  description=The version of the processor to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A processor attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a processor version for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the processor version definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the order definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The class name of the processor to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=processorVersion,
  type=string,
  description=The version of the processor to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A processor attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete a processor version from the current mission,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The class name of the processor to delete,
  optional=false,
  repeatable=false
], CLIParameter [
  name=processorVersion,
  type=string,
  description=The version of the processor to delete,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=configuration,
  description=Commands to manage configured processors,
  subcommands=[CLICommand [
  name=show,
  description=Show all configured processor for the current mission or only the ones identified,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=configuredProcessorIdentifier,
  type=string,
  description=The identifier of the configured processor,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new configured processor by combining a processor version and a configuration; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the configured processor definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=configuredProcessorIdentifier,
  type=string,
  description=The identifier of the configured processor,
  optional=true,
  repeatable=false
], CLIParameter [
  name=className,
  type=string,
  description=The class name of the processor (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=processorVersion,
  type=string,
  description=The version of the processor (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=configurationVersion,
  type=string,
  description=The version of the configuration (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A configured processor attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a configured processor; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the configured processor definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=configuredProcessorIdentifier,
  type=string,
  description=The identifier of the configured processor (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A configured processor attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete a configured processor,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=configuredProcessorIdentifier,
  type=string,
  description=The identifier of the configured processor to delete,
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=configuration,
  description=Commands for managing configurations,
  subcommands=[CLICommand [
  name=show,
  description=Show all configurations for the current mission and processor class or a named one,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor classes for the configurations,
  optional=true,
  repeatable=false
], CLIParameter [
  name=configurationVersion,
  type=string,
  description=The configuration versions to show,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new configuration for the current mission and processor class; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the configuration definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor class (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=configurationVersion,
  type=string,
  description=The version of the configuration to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A configuration attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a configuration for the current mission and processor class; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the configuration definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the order definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor class (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=configurationVersion,
  type=string,
  description=The version of the configuration to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A configuration attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Remove a configuration from the current mission and processor class,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor class,
  optional=false,
  repeatable=false
], CLIParameter [
  name=configurationVersion,
  type=string,
  description=The version of the configuration to delete,
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=productclass,
  description=Commands for managing product classes,
  subcommands=[CLICommand [
  name=show,
  description=Show all product classes for the current mission or only the selected ones,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the product class to show,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new product class for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the product class definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the product class name to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A product class attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a product class for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the product class definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the product class definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the product class name to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A product class attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete the named product class from the current mission,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the product class to delete,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=rule,
  description=Commands for managing selection rules,
  subcommands=[CLICommand [
  name=show,
  description=Show all selection rules for the current mission and target product class,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { PLAIN, JSON, XML, YAML }; default value PLAIN [rule language]).,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=targetProductClass,
  type=string,
  description=The product class using the selection rules,
  optional=false,
  repeatable=false
], CLIParameter [
  name=sourceProductClass,
  type=string,
  description=The product class requested by the selection rules,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new selection rule for the given target product class; the user will be prompted for mandatory attributes not given on the command line. If PLAIN format is specified and no file name is given, the user will be prompted to enter the selection rule in Rule Language.,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the selection rule definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { PLAIN, JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=targetProductClass,
  type=string,
  description=The target product class name (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A selection rule attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a selection rule for the given target class and configured processor; the user will be prompted for mandatory attributes not given on the command line. If PLAIN format is specified and no file name is given, the user will be prompted to enter the selection rule in Rule Language. If multiple rules exist for the target product class, the user will be prompted to select the rule to apply the update to.,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the selection rule definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { PLAIN, JSON, XML, YAML }; default value JSON) Note. Only PLAIN format is implemented for the time being.,
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the selection rule definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=targetProductClass,
  type=string,
  description=The target product class name (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A selection rule attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete the selection rule for the given target class,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=targetProductClass,
  type=string,
  description=The product class name of the selection rule,
  optional=true,
  repeatable=false
], CLIParameter [
  name=ruleId,
  type=string,
  description=The database ID of the selection rule to delete,
  optional=true,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=product,
  description=Commands for managing products,
  subcommands=[CLICommand [
  name=show,
  description=Show products for a mission and product class, optionally restricted to a given time range,
  subcommands=[],
  options=[CLIOption [
  name=from,
  type=datetime,
  description=Lower bound of sensing start time,
  shortForm=null
], CLIOption [
  name=to,
  type=datetime,
  description=Upper bound of sensing start time,
  shortForm=null
], CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the product class to show,
  optional=false,
  repeatable=true
]]
], CLICommand [
  name=create,
  description=Create a new product for the current mission and product class; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the product definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The class name of the product to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A product attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a product for the current mission and product class; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the product definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the product definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=id,
  type=integer,
  description=The database ID of the product to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A product attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete the product with the given database ID,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=id,
  type=integer,
  description=The database ID of the product to delete,
  optional=true,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=ingest,
  description=Ingest all products into the storage manager of the given processing facility,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the ingested products from (mandatory),
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=processingFacility,
  type=string,
  description=The name of the facility to ingest the products to,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=user,
  description=Commands for managing users (note that user names are stored with a mission prefix in the user database, but the mission prefix is not used in the command-line interface),
  subcommands=[CLICommand [
  name=show,
  description=Show user accounts for the current mission,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
], CLIOption [
  name=verbose,
  type=boolean,
  description=If set, give user details, otherwise show usernames only (setting username parameter implies verbose),
  shortForm=v
]],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to show (without mission prefix),
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new user account within the given mission,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the user account definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=mission,
  type=string,
  description=The mission to create the user for (only valid if not yet logged in into a mission; basically intended for creating a single user with "ROLE_USERMGR" for a new mission),
  shortForm=m
]],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to create (without mission prefix; mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A user attribute to set in the form "<attribute name>=<attribute value>" (if a password is specified here, it must be unencrypted, while in the file it must be encrypted),
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update the given user account; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the user account definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the user account definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to update (without mission prefix; mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A user account attribute to set in the form "<attribute name>=<attribute value>" (if a password is specified here, it must be unencrypted, while in the file it must be encrypted),
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete the user account with the given name,
  subcommands=[],
  options=[CLIOption [
  name=mission,
  type=string,
  description=The mission to delete the user from (only valid if not yet logged in into a mission; basically intended for removing the last user with "ROLE_USERMGR" from a mission before deletion),
  shortForm=m
]],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to delete (without mission prefix),
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=enable,
  description=Enable the user account with the given name,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to enable (without mission prefix),
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=disable,
  description=Disable the user account with the given name,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to disable (without mission prefix),
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=grant,
  description=Grant authorities for the current mission directly to the user (not recommended, use of group authorities recommended),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to grant authorities to (without mission prefix; mandatory if not read from file),
  optional=false,
  repeatable=false
], CLIParameter [
  name=authority,
  type=string,
  description=An authority to grant (multiple authorities allowed),
  optional=false,
  repeatable=true
]]
], CLICommand [
  name=revoke,
  description=Revoke authorities for the current mission from the user (directly granted authorities only),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to revoke authorities from (without mission prefix; mandatory if not read from file),
  optional=false,
  repeatable=false
], CLIParameter [
  name=authority,
  type=string,
  description=An authority to revoke (multiple authorities allowed),
  optional=false,
  repeatable=true
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=group,
  description=Commands for managing groups (note that group names are stored with a mission prefix in the user database, but the mission prefix is not used in the command-line interface),
  subcommands=[CLICommand [
  name=show,
  description=Show user groups for the current mission,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
], CLIOption [
  name=verbose,
  type=boolean,
  description=If set, give user group details, otherwise show group names only (setting group name parameter implies verbose),
  shortForm=v
]],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to show (without mission prefix),
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new user group within the given mission,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the user group definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to create (without mission prefix; mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A group attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update the given user group; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the user group definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the user group definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to update (without mission prefix; mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A user group attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete the group account with the given name,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to delete (without mission prefix),
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=grant,
  description=Grant authorities for the current mission to the user group,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to grant authorities to (without mission prefix),
  optional=false,
  repeatable=false
], CLIParameter [
  name=authority,
  type=string,
  description=An authority to grant (multiple authorities allowed),
  optional=false,
  repeatable=true
]]
], CLICommand [
  name=revoke,
  description=Revoke authorities for the current mission from the user group,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to revoke authorities from (without mission prefix),
  optional=false,
  repeatable=false
], CLIParameter [
  name=authority,
  type=string,
  description=An authority to revoke (multiple authorities allowed),
  optional=false,
  repeatable=true
]]
], CLICommand [
  name=members,
  description=List the user accounts of a user group (for the current mission only, users may have different group associations in different missions),
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
], CLIOption [
  name=verbose,
  type=boolean,
  description=If set, give user details, otherwise show user names only,
  shortForm=v
]],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to list the users for (without mission prefix),
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=add,
  description=Add user accounts to the user group (for the current mission only, users may have different group associations in different missions),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to add users to (without mission prefix),
  optional=false,
  repeatable=false
], CLIParameter [
  name=userName,
  type=string,
  description=The name of a user account to add (without mission prefix; multiple user names allowed),
  optional=false,
  repeatable=true
]]
], CLICommand [
  name=remove,
  description=Remove user accounts from the user group (for the current mission only),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to remove users from (without mission prefix),
  optional=false,
  repeatable=false
], CLIParameter [
  name=userName,
  type=string,
  description=The name of a user account to add (without mission prefix; multiple user names allowed),
  optional=false,
  repeatable=true
]]
]],
  options=[],
  parameters=[]
]]
]
2020-03-25 21:37:39.599 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parse(login -usysadm -psysadm)
2020-03-25 21:37:39.599 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseOption(-usysadm, login)
2020-03-25 21:37:39.599 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseMultipleModalOptions(-usysadm, login)
2020-03-25 21:37:39.600 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseOption()
2020-03-25 21:37:39.600 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseOption(-psysadm, login)
2020-03-25 21:37:39.600 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseMultipleModalOptions(-psysadm, login)
2020-03-25 21:37:39.600 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseOption()
2020-03-25 21:37:39.600 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parse()
2020-03-25 21:37:39.600 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : ... received command 'login'
2020-03-25 21:37:39.600 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> executeCommand(login)
2020-03-25 21:37:39.600 TRACE 13419 --- [main] de.dlr.proseo.ui.backend.LoginManager    : >>> doLogin(sysadm, ********, null)
2020-03-25 21:37:39.600 TRACE 13419 --- [main] de.dlr.proseo.ui.backend.LoginManager    : >>> login(sysadm, ********, null)
2020-03-25 21:37:39.601 TRACE 13419 --- [main] d.d.proseo.ui.backend.ServiceConnection  : >>> getFromService(http://localhost:8086/proseo/user-mgr/v0.1, /login, interface java.util.List, user, password)
2020-03-25 21:37:39.763 TRACE 13419 --- [main] d.d.proseo.ui.backend.ServiceConnection  : ... calling service URL http://localhost:8086/proseo/user-mgr/v0.1/login with GET
2020-03-25 21:37:39.929 TRACE 13419 --- [main] d.d.proseo.ui.backend.ServiceConnection  : <<< getFromService()
2020-03-25 21:37:39.930 TRACE 13419 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2821, [sysadm])
2020-03-25 21:37:39.930  INFO 13419 --- [main] de.dlr.proseo.ui.backend.LoginManager    : (I2821) User sysadm logged in
2020-03-25 21:37:39.930 DEBUG 13419 --- [main] de.dlr.proseo.ui.backend.LoginManager    : ... with authorities: [ROLE_ROOT]
2020-03-25 21:37:39.930 TRACE 13419 --- [main] de.dlr.proseo.ui.backend.LoginManager    : <<< doLogin()
2020-03-25 21:37:39.930 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< executeCommand({})
2020-03-25 21:38:04.851 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parse(mission create --file=PTM.json)
2020-03-25 21:38:04.851 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseOption(--file=PTM.json, create)
2020-03-25 21:38:04.852 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseOption()
2020-03-25 21:38:04.852 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parse()
2020-03-25 21:38:04.852 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : ... received command 'mission'
2020-03-25 21:38:04.852 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> executeCommand(mission)
2020-03-25 21:38:04.852 TRACE 13419 --- [main] d.d.proseo.ui.cli.MissionCommandRunner   : >>> executeCommand(mission)
2020-03-25 21:38:04.852 TRACE 13419 --- [main] d.d.proseo.ui.cli.MissionCommandRunner   : >>> createMission(create)
2020-03-25 21:38:04.853 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.CLIUtil             : >>> parseObjectFile(PTM.json, JSON, class de.dlr.proseo.model.rest.model.RestMission)
2020-03-25 21:38:04.881 TRACE 13419 --- [main] d.d.proseo.ui.backend.ServiceConnection  : >>> postToService(http://localhost:8082/proseo/order-mgr/v0.1, /missions, object, user, password)
2020-03-25 21:38:04.888 TRACE 13419 --- [main] d.d.proseo.ui.backend.ServiceConnection  : ... calling service URL http://localhost:8082/proseo/order-mgr/v0.1/missions with POST
2020-03-25 21:38:05.067 TRACE 13419 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2810, [500 ])
2020-03-25 21:38:05.068 ERROR 13419 --- [main] d.d.proseo.ui.backend.ServiceConnection  : (E2810) HTTP request failed (cause: 500 )

org.springframework.web.client.HttpServerErrorException$InternalServerError: 500 
	at org.springframework.web.client.HttpServerErrorException.create(HttpServerErrorException.java:79)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:124)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:102)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:778)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:736)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:670)
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:445)
	at de.dlr.proseo.ui.backend.ServiceConnection.postToService(ServiceConnection.java:191)
	at de.dlr.proseo.ui.cli.MissionCommandRunner.createMission(MissionCommandRunner.java:219)
	at de.dlr.proseo.ui.cli.MissionCommandRunner.executeCommand(MissionCommandRunner.java:1186)
	at de.dlr.proseo.ui.cli.CommandLineInterface.executeCommand(CommandLineInterface.java:199)
	at de.dlr.proseo.ui.cli.CommandLineInterface.run(CommandLineInterface.java:301)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:779)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:763)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202)
	at de.dlr.proseo.ui.cli.CommandLineInterface.main(CommandLineInterface.java:314)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:47)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:86)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:50)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51)

2020-03-25 21:38:05.068 TRACE 13419 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2806, [(E2810) HTTP request failed (cause: 500 ); nested exception is org.springframework.web.client.HttpServerErrorException$InternalServerError: 500 ])
2020-03-25 21:38:05.069 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< executeCommand({})
2020-03-25 21:38:18.364 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parse(exit)
2020-03-25 21:38:18.364 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parse()
2020-03-25 21:38:18.364 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : ... received command 'exit'
2020-03-25 21:38:18.364 TRACE 13419 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< run()
2020-03-25 21:38:38.631  INFO 13445 --- [main] d.d.proseo.ui.cli.CommandLineInterface   : Starting CommandLineInterface v0.1.0 on localhost with PID 13445 (/Users/thomas/Documents/Thomas Beruf/Managementberatung/30 Kunden/DLR-EOC/Copernicus/S5P/S5P Processing Subsystem/prosEO/ui/cli/target/proseo-ui-cli.jar started by thomas in /Users/thomas/Documents/Thomas Beruf/Managementberatung/30 Kunden/DLR-EOC/Copernicus/S5P/S5P Processing Subsystem/prosEO/samples/testdata)
2020-03-25 21:38:38.634 DEBUG 13445 --- [main] d.d.proseo.ui.cli.CommandLineInterface   : Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2020-03-25 21:38:38.634  INFO 13445 --- [main] d.d.proseo.ui.cli.CommandLineInterface   : No active profile set, falling back to default profiles: default
2020-03-25 21:38:39.766  INFO 13445 --- [main] d.d.proseo.ui.cli.CommandLineInterface   : Started CommandLineInterface in 1.647 seconds (JVM running for 2.012)
2020-03-25 21:38:39.767 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> run({})
2020-03-25 21:38:39.768 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLISyntax    : >>> fromSyntaxFile(ui-cli-syntax.yml)
2020-03-25 21:38:39.826 TRACE 13445 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> UIMessages::<init>
2020-03-25 21:38:39.828 TRACE 13445 --- [main] de.dlr.proseo.ui.backend.UIMessages      : ... number of messages found: 183
2020-03-25 21:38:39.829 TRACE 13445 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2900, [ui-cli-syntax.yml])
2020-03-25 21:38:39.829  INFO 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLISyntax    : (I2900) Command line syntax loaded from syntax file ui-cli-syntax.yml
2020-03-25 21:38:39.829 DEBUG 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLISyntax    : Syntax definition: CLISyntax [
  title=prosEO UI Command Line Interface Syntax,
  version=v0.1,
  description=Commands can be entered after the "prosEO>" command prompt. They can also be invoked on the shell command line 
following the name of the prosEO executable (e. g. "proseo") and at least one whitespace character.

Commands may have subcommands, which precede all options and parameters.

Commands may have options (--option, a short form -o may be given as alias) and parameters
(passed as values without the parameter name).

Modal options can be combined into one option, i. e. "-a -b -c" is the same as "-abc".
Options with values are either of the form "-ovalue" or "--option=value";
in the case of multiple values "--option=value,value,value".

Parameters are positional, except (implicitly) for attribute parameters of the form "<attribute name>=<attribute value>".
Attribute values may be comma-separated string lists, but they cannot represent attributes of more complex types. To set
complex object attributes use the "--file" option and pass a Json, XML or Yaml file.

All date-time values must conform to the ISO date-time format ("YYYY-MM-DDTHH:MM:SS").

So the general syntax is:
command [subcommand...] [option...] [parameter...]

Caution: Typing ^C (Control-C) terminates the Command Line Interface immediately.
,
  globalOptions=[CLIOption [
  name=help,
  type=boolean,
  description=Show help information for the current command/subcommand level (top level commands, when called from the shell command line),
  shortForm=h
]],
  options=[CLIOption [
  name=version,
  type=boolean,
  description=Show the prosEO CLI version and exit (only for call from shell command line),
  shortForm=V
], CLIOption [
  name=user,
  type=string,
  description=The user name for login to prosEO.,
  shortForm=u
], CLIOption [
  name=password,
  type=string,
  description=The password for login to prosEO (only valid if a user name for login is given).,
  shortForm=p
], CLIOption [
  name=mission,
  type=string,
  description=The mission to login to (only valid if a user name for login is given),
  shortForm=m
]],
  commands=[CLICommand [
  name=exit,
  description=Terminate the Command Line Interface,
  subcommands=[],
  options=[],
  parameters=[]
], CLICommand [
  name=help,
  description=Show the prosEO Command Line Interface help information (this page; for subcommand help, type "<subcommand> --help"),
  subcommands=[],
  options=[],
  parameters=[]
], CLICommand [
  name=login,
  description=Log in to a mission in prosEO. All valid commands except for "mission show" require prior login.,
  subcommands=[],
  options=[CLIOption [
  name=user,
  type=string,
  description=User name,
  shortForm=u
], CLIOption [
  name=password,
  type=string,
  description=The user's password,
  shortForm=p
]],
  parameters=[CLIParameter [
  name=missionCode,
  type=string,
  description=The code of the mission to log in to (may be empty for user with prosEO Administrator privileges),
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=logout,
  description=Log out of prosEO. No commands except "mission show" and "login" will be accepted after logout.,
  subcommands=[],
  options=[],
  parameters=[]
], CLICommand [
  name=mission,
  description=Commands related to configuring an earth observation mission,
  subcommands=[CLICommand [
  name=show,
  description=List all configured missions or only the given one,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=missionCode,
  type=string,
  description=The code of the mission to list,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new earth observation mission in prosEO,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the mission definitions from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=missionCode,
  type=string,
  description=The code of the mission (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A mission attribute to update in the form "<attribute name>=<attribute value>", overrides values given in the mission definition file,
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update the mission attributes; if the input is not from a file, the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the updated mission definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=attribute,
  type=string,
  description=A mission attribute to update in the form "<attribute name>=<attribute value>", overrides values given in the mission definition file,
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=spacecraft,
  description=Commands to manage the spacecrafts for a mission,
  subcommands=[CLICommand [
  name=add,
  description=Add a spacecraft to the mission list of spacecrafts; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the updated mission definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft to remove (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A spacecraft attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=remove,
  description=Remove a spacecraft from the mission list of spacecrafts,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft to remove,
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=orbit,
  description=Commands for managing orbits for a given spacecraft,
  subcommands=[CLICommand [
  name=show,
  description=Lists orbits, optionally restricted to a given orbit range,
  subcommands=[],
  options=[CLIOption [
  name=from,
  type=integer,
  description=Lower bound of orbit range,
  shortForm=null
], CLIOption [
  name=to,
  type=integer,
  description=Upper bound of orbit range,
  shortForm=null
], CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft the orbits belong to,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Add a set of orbits for the given spacecraft,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the orbit definitions from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft the orbits belong to (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=An orbit attribute to update in the form "<attribute name>=<attribute value>", only allowed if no orbit file is given (i. e. a single orbit is created),
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a set of orbits for the given spacecraft,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the orbit definitions from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft the orbits belong to (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=orbitNumber,
  type=string,
  description=The number of the orbit to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=An orbit attribute to update in the form "<attribute name>=<attribute value>", only allowed if no orbit file is given (i. e. a single orbit is updated),
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Deletes orbits in a given orbit range,
  subcommands=[],
  options=[CLIOption [
  name=from,
  type=integer,
  description=Lower bound of orbit range,
  shortForm=null
], CLIOption [
  name=to,
  type=integer,
  description=Upper bound of orbit range,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=spacecraftCode,
  type=string,
  description=The code of the spacecraft the orbits belong to,
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=order,
  description=Commands for managing processing orders; some commands can only be issued, if the order is in the correct status. Order status sequence is Initial - Approved - Planned - Released - Running - Completed/Failed - Closed. Additionally an order may be in status "Suspending" after issuing a "suspend" command, until all running job steps are finished.,
  subcommands=[CLICommand [
  name=show,
  description=Lists orders, optionally restricted to a given time range or a specific processing order,
  subcommands=[],
  options=[CLIOption [
  name=from,
  type=datetime,
  description=Lower bound of order start time,
  shortForm=null
], CLIOption [
  name=to,
  type=datetime,
  description=Upper bound of order start time,
  shortForm=null
], CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier (overrides --from and --to options),
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new processing order (in status Initial); if the input is not from a file, the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the order definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier for user reference (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=An order attribute to update in the form "<attribute name>=<attribute value>", overrides values given in the order definition file,
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a processing order (only allowed in status Initial),
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the order definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the order definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier for user reference (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=An order attribute to update in the form "<attribute name>=<attribute value>", overrides values given in the order definition file,
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=approve,
  description=Approve the named processing order for planning (must be in status Initial, new status is Approved),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=plan,
  description=Plan the jobs for the named processing order (must be in status Approved, new status is Planned),
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format for the resulting job list (one of { NONE, JSON, XML, YAML }; default value NONE),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
], CLIParameter [
  name=facility,
  type=string,
  description=The processing facility, on which the order shall be run,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=reset,
  description=Reset the named processing order to initial state (must be in status Approved or Planned, new status is Initial),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=release,
  description=Release the jobs of the named processing order for processing (must be in status Planned, new status is Released; order status will change to Running, when execution of the first job step starts; when all job steps are finished, the status will change again to Completed, if all job steps finished successfully, or Failed, if at least one job step failed),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=suspend,
  description=Suspend starting of further jobs for the named processing order (must be in status Released or Running, new status is Suspending, then Planned, when all running job steps are finished),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=resume,
  description=Resume starting of jobs for the named processing order after suspend (order must be in status Planned, new status is Released [actually the same command as "release"]),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=cancel,
  description=Cancel the named processing order (remaining jobs are not executed, order state changes to Failed; order must be in status Planned, i. e. it may be necessary to issue a "suspend" command first),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=close,
  description=Close the named processing order (must be in status Completed or Failed, new status is Closed),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=delete,
  description=Delete the named processing order (only allowed in status Initial or Closed),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=orderId,
  type=string,
  description=The order identifier,
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=processor,
  description=Commands for managing processor classes, processors, configurations and configured processors,
  subcommands=[CLICommand [
  name=class,
  description=Commands for managing processor classes,
  subcommands=[CLICommand [
  name=show,
  description=Show all processor classes for the current mission or a named one,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor classes to show,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new processor class for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the processor class definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor class to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A processor class attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a processor class for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the processor class definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor classes to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A processor class attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Remove the named processor class from the current mission,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor classes to update (mandatory if not read from file),
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=show,
  description=Show all processor versions for the current mission or only the selected ones,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The class name of the processor to show,
  optional=true,
  repeatable=false
], CLIParameter [
  name=processorVersion,
  type=string,
  description=The version of the processor to show,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new processor version for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the processor version definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The class name of the processor to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=processorVersion,
  type=string,
  description=The version of the processor to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A processor attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a processor version for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the processor version definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the order definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The class name of the processor to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=processorVersion,
  type=string,
  description=The version of the processor to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A processor attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete a processor version from the current mission,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The class name of the processor to delete,
  optional=false,
  repeatable=false
], CLIParameter [
  name=processorVersion,
  type=string,
  description=The version of the processor to delete,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=configuration,
  description=Commands to manage configured processors,
  subcommands=[CLICommand [
  name=show,
  description=Show all configured processor for the current mission or only the ones identified,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=configuredProcessorIdentifier,
  type=string,
  description=The identifier of the configured processor,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new configured processor by combining a processor version and a configuration; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the configured processor definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=configuredProcessorIdentifier,
  type=string,
  description=The identifier of the configured processor,
  optional=true,
  repeatable=false
], CLIParameter [
  name=className,
  type=string,
  description=The class name of the processor (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=processorVersion,
  type=string,
  description=The version of the processor (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=configurationVersion,
  type=string,
  description=The version of the configuration (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A configured processor attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a configured processor; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the configured processor definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=configuredProcessorIdentifier,
  type=string,
  description=The identifier of the configured processor (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A configured processor attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete a configured processor,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=configuredProcessorIdentifier,
  type=string,
  description=The identifier of the configured processor to delete,
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=configuration,
  description=Commands for managing configurations,
  subcommands=[CLICommand [
  name=show,
  description=Show all configurations for the current mission and processor class or a named one,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor classes for the configurations,
  optional=true,
  repeatable=false
], CLIParameter [
  name=configurationVersion,
  type=string,
  description=The configuration versions to show,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new configuration for the current mission and processor class; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the configuration definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor class (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=configurationVersion,
  type=string,
  description=The version of the configuration to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A configuration attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a configuration for the current mission and processor class; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the configuration definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the order definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor class (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=configurationVersion,
  type=string,
  description=The version of the configuration to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A configuration attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Remove a configuration from the current mission and processor class,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the processor class,
  optional=false,
  repeatable=false
], CLIParameter [
  name=configurationVersion,
  type=string,
  description=The version of the configuration to delete,
  optional=false,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=productclass,
  description=Commands for managing product classes,
  subcommands=[CLICommand [
  name=show,
  description=Show all product classes for the current mission or only the selected ones,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the product class to show,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new product class for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the product class definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the product class name to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A product class attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a product class for the current mission; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the product class definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the product class definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the product class name to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A product class attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete the named product class from the current mission,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the product class to delete,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=rule,
  description=Commands for managing selection rules,
  subcommands=[CLICommand [
  name=show,
  description=Show all selection rules for the current mission and target product class,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { PLAIN, JSON, XML, YAML }; default value PLAIN [rule language]).,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=targetProductClass,
  type=string,
  description=The product class using the selection rules,
  optional=false,
  repeatable=false
], CLIParameter [
  name=sourceProductClass,
  type=string,
  description=The product class requested by the selection rules,
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new selection rule for the given target product class; the user will be prompted for mandatory attributes not given on the command line. If PLAIN format is specified and no file name is given, the user will be prompted to enter the selection rule in Rule Language.,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the selection rule definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { PLAIN, JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=targetProductClass,
  type=string,
  description=The target product class name (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A selection rule attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a selection rule for the given target class and configured processor; the user will be prompted for mandatory attributes not given on the command line. If PLAIN format is specified and no file name is given, the user will be prompted to enter the selection rule in Rule Language. If multiple rules exist for the target product class, the user will be prompted to select the rule to apply the update to.,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the selection rule definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { PLAIN, JSON, XML, YAML }; default value JSON) Note. Only PLAIN format is implemented for the time being.,
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the selection rule definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=targetProductClass,
  type=string,
  description=The target product class name (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A selection rule attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete the selection rule for the given target class,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=targetProductClass,
  type=string,
  description=The product class name of the selection rule,
  optional=true,
  repeatable=false
], CLIParameter [
  name=ruleId,
  type=string,
  description=The database ID of the selection rule to delete,
  optional=true,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=product,
  description=Commands for managing products,
  subcommands=[CLICommand [
  name=show,
  description=Show products for a mission and product class, optionally restricted to a given time range,
  subcommands=[],
  options=[CLIOption [
  name=from,
  type=datetime,
  description=Lower bound of sensing start time,
  shortForm=null
], CLIOption [
  name=to,
  type=datetime,
  description=Upper bound of sensing start time,
  shortForm=null
], CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The name of the product class to show,
  optional=false,
  repeatable=true
]]
], CLICommand [
  name=create,
  description=Create a new product for the current mission and product class; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the product definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=className,
  type=string,
  description=The class name of the product to create (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A product attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update a product for the current mission and product class; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the product definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the product definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=id,
  type=integer,
  description=The database ID of the product to update (mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A product attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete the product with the given database ID,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=id,
  type=integer,
  description=The database ID of the product to delete,
  optional=true,
  repeatable=false
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=ingest,
  description=Ingest all products into the storage manager of the given processing facility,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the ingested products from (mandatory),
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=processingFacility,
  type=string,
  description=The name of the facility to ingest the products to,
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=user,
  description=Commands for managing users (note that user names are stored with a mission prefix in the user database, but the mission prefix is not used in the command-line interface),
  subcommands=[CLICommand [
  name=show,
  description=Show user accounts for the current mission,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
], CLIOption [
  name=verbose,
  type=boolean,
  description=If set, give user details, otherwise show usernames only (setting username parameter implies verbose),
  shortForm=v
]],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to show (without mission prefix),
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new user account within the given mission,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the user account definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=mission,
  type=string,
  description=The mission to create the user for (only valid if not yet logged in into a mission; basically intended for creating a single user with "ROLE_USERMGR" for a new mission),
  shortForm=m
]],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to create (without mission prefix; mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A user attribute to set in the form "<attribute name>=<attribute value>" (if a password is specified here, it must be unencrypted, while in the file it must be encrypted),
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update the given user account; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the user account definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the user account definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to update (without mission prefix; mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A user account attribute to set in the form "<attribute name>=<attribute value>" (if a password is specified here, it must be unencrypted, while in the file it must be encrypted),
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete the user account with the given name,
  subcommands=[],
  options=[CLIOption [
  name=mission,
  type=string,
  description=The mission to delete the user from (only valid if not yet logged in into a mission; basically intended for removing the last user with "ROLE_USERMGR" from a mission before deletion),
  shortForm=m
]],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to delete (without mission prefix),
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=enable,
  description=Enable the user account with the given name,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to enable (without mission prefix),
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=disable,
  description=Disable the user account with the given name,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to disable (without mission prefix),
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=grant,
  description=Grant authorities for the current mission directly to the user (not recommended, use of group authorities recommended),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to grant authorities to (without mission prefix; mandatory if not read from file),
  optional=false,
  repeatable=false
], CLIParameter [
  name=authority,
  type=string,
  description=An authority to grant (multiple authorities allowed),
  optional=false,
  repeatable=true
]]
], CLICommand [
  name=revoke,
  description=Revoke authorities for the current mission from the user (directly granted authorities only),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=userName,
  type=string,
  description=The name of the user account to revoke authorities from (without mission prefix; mandatory if not read from file),
  optional=false,
  repeatable=false
], CLIParameter [
  name=authority,
  type=string,
  description=An authority to revoke (multiple authorities allowed),
  optional=false,
  repeatable=true
]]
]],
  options=[],
  parameters=[]
], CLICommand [
  name=group,
  description=Commands for managing groups (note that group names are stored with a mission prefix in the user database, but the mission prefix is not used in the command-line interface),
  subcommands=[CLICommand [
  name=show,
  description=Show user groups for the current mission,
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
], CLIOption [
  name=verbose,
  type=boolean,
  description=If set, give user group details, otherwise show group names only (setting group name parameter implies verbose),
  shortForm=v
]],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to show (without mission prefix),
  optional=true,
  repeatable=false
]]
], CLICommand [
  name=create,
  description=Create a new user group within the given mission,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the user group definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
]],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to create (without mission prefix; mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A group attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=update,
  description=Update the given user group; the user will be prompted for mandatory attributes not given on the command line,
  subcommands=[],
  options=[CLIOption [
  name=file,
  type=string,
  description=Path to file to read the user group definition from,
  shortForm=f
], CLIOption [
  name=format,
  type=string,
  description=The file format (one of { JSON, XML, YAML }; default value JSON),
  shortForm=null
], CLIOption [
  name=delete-attributes,
  type=boolean,
  description=Delete attributes not given in the user group definition file and/or the command parameters,
  shortForm=null
]],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to update (without mission prefix; mandatory if not read from file),
  optional=true,
  repeatable=false
], CLIParameter [
  name=attribute,
  type=string,
  description=A user group attribute to set in the form "<attribute name>=<attribute value>",
  optional=true,
  repeatable=true
]]
], CLICommand [
  name=delete,
  description=Delete the group account with the given name,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to delete (without mission prefix),
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=grant,
  description=Grant authorities for the current mission to the user group,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to grant authorities to (without mission prefix),
  optional=false,
  repeatable=false
], CLIParameter [
  name=authority,
  type=string,
  description=An authority to grant (multiple authorities allowed),
  optional=false,
  repeatable=true
]]
], CLICommand [
  name=revoke,
  description=Revoke authorities for the current mission from the user group,
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to revoke authorities from (without mission prefix),
  optional=false,
  repeatable=false
], CLIParameter [
  name=authority,
  type=string,
  description=An authority to revoke (multiple authorities allowed),
  optional=false,
  repeatable=true
]]
], CLICommand [
  name=members,
  description=List the user accounts of a user group (for the current mission only, users may have different group associations in different missions),
  subcommands=[],
  options=[CLIOption [
  name=format,
  type=string,
  description=The output format (one of { JSON, XML, YAML }; default value YAML [human readable]),
  shortForm=null
], CLIOption [
  name=verbose,
  type=boolean,
  description=If set, give user details, otherwise show user names only,
  shortForm=v
]],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to list the users for (without mission prefix),
  optional=false,
  repeatable=false
]]
], CLICommand [
  name=add,
  description=Add user accounts to the user group (for the current mission only, users may have different group associations in different missions),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to add users to (without mission prefix),
  optional=false,
  repeatable=false
], CLIParameter [
  name=userName,
  type=string,
  description=The name of a user account to add (without mission prefix; multiple user names allowed),
  optional=false,
  repeatable=true
]]
], CLICommand [
  name=remove,
  description=Remove user accounts from the user group (for the current mission only),
  subcommands=[],
  options=[],
  parameters=[CLIParameter [
  name=groupName,
  type=string,
  description=The name of the user group to remove users from (without mission prefix),
  optional=false,
  repeatable=false
], CLIParameter [
  name=userName,
  type=string,
  description=The name of a user account to add (without mission prefix; multiple user names allowed),
  optional=false,
  repeatable=true
]]
]],
  options=[],
  parameters=[]
]]
]
2020-03-25 21:38:43.999 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parse(login -usysadm -psysadm)
2020-03-25 21:38:43.999 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseOption(-usysadm, login)
2020-03-25 21:38:43.999 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseMultipleModalOptions(-usysadm, login)
2020-03-25 21:38:44.000 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseOption()
2020-03-25 21:38:44.000 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseOption(-psysadm, login)
2020-03-25 21:38:44.000 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseMultipleModalOptions(-psysadm, login)
2020-03-25 21:38:44.000 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseOption()
2020-03-25 21:38:44.000 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parse()
2020-03-25 21:38:44.000 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : ... received command 'login'
2020-03-25 21:38:44.000 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> executeCommand(login)
2020-03-25 21:38:44.000 TRACE 13445 --- [main] de.dlr.proseo.ui.backend.LoginManager    : >>> doLogin(sysadm, ********, null)
2020-03-25 21:38:44.000 TRACE 13445 --- [main] de.dlr.proseo.ui.backend.LoginManager    : >>> login(sysadm, ********, null)
2020-03-25 21:38:44.001 TRACE 13445 --- [main] d.d.proseo.ui.backend.ServiceConnection  : >>> getFromService(http://localhost:8086/proseo/user-mgr/v0.1, /login, interface java.util.List, user, password)
2020-03-25 21:38:44.169 TRACE 13445 --- [main] d.d.proseo.ui.backend.ServiceConnection  : ... calling service URL http://localhost:8086/proseo/user-mgr/v0.1/login with GET
2020-03-25 21:38:44.212 DEBUG 13445 --- [main] o.a.h.client.protocol.RequestAddCookies  : CookieSpec selected: default
2020-03-25 21:38:44.222 DEBUG 13445 --- [main] o.a.h.client.protocol.RequestAuthCache   : Auth cache not set in the context
2020-03-25 21:38:44.223 DEBUG 13445 --- [main] h.i.c.PoolingHttpClientConnectionManager : Connection request: [route: {}->http://localhost:8086][total kept alive: 0; route allocated: 0 of 5; total allocated: 0 of 10]
2020-03-25 21:38:44.234 DEBUG 13445 --- [main] h.i.c.PoolingHttpClientConnectionManager : Connection leased: [id: 0][route: {}->http://localhost:8086][total kept alive: 0; route allocated: 1 of 5; total allocated: 1 of 10]
2020-03-25 21:38:44.236 DEBUG 13445 --- [main] o.a.http.impl.execchain.MainClientExec   : Opening connection {}->http://localhost:8086
2020-03-25 21:38:44.243 DEBUG 13445 --- [main] .i.c.DefaultHttpClientConnectionOperator : Connecting to localhost/127.0.0.1:8086
2020-03-25 21:38:44.247 DEBUG 13445 --- [main] .i.c.DefaultHttpClientConnectionOperator : Connection established 127.0.0.1:57113<->127.0.0.1:8086
2020-03-25 21:38:44.248 DEBUG 13445 --- [main] o.a.http.impl.execchain.MainClientExec   : Executing request GET /proseo/user-mgr/v0.1/login HTTP/1.1
2020-03-25 21:38:44.248 DEBUG 13445 --- [main] o.a.http.impl.execchain.MainClientExec   : Proxy auth state: UNCHALLENGED
2020-03-25 21:38:44.251 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-0 >> GET /proseo/user-mgr/v0.1/login HTTP/1.1
2020-03-25 21:38:44.251 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-0 >> Accept: application/json, application/xml, application/*+json, text/xml, application/*+xml
2020-03-25 21:38:44.251 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-0 >> Authorization: Basic c3lzYWRtOnN5c2FkbQ==
2020-03-25 21:38:44.251 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-0 >> Host: localhost:8086
2020-03-25 21:38:44.251 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-0 >> Connection: Keep-Alive
2020-03-25 21:38:44.251 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-0 >> User-Agent: Apache-HttpClient/4.5.9 (Java/11.0.3)
2020-03-25 21:38:44.251 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-0 >> Accept-Encoding: gzip,deflate
2020-03-25 21:38:44.251 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 >> "GET /proseo/user-mgr/v0.1/login HTTP/1.1[\r][\n]"
2020-03-25 21:38:44.251 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 >> "Accept: application/json, application/xml, application/*+json, text/xml, application/*+xml[\r][\n]"
2020-03-25 21:38:44.251 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 >> "Authorization: Basic c3lzYWRtOnN5c2FkbQ==[\r][\n]"
2020-03-25 21:38:44.251 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 >> "Host: localhost:8086[\r][\n]"
2020-03-25 21:38:44.251 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 >> "Connection: Keep-Alive[\r][\n]"
2020-03-25 21:38:44.251 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 >> "User-Agent: Apache-HttpClient/4.5.9 (Java/11.0.3)[\r][\n]"
2020-03-25 21:38:44.251 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 >> "Accept-Encoding: gzip,deflate[\r][\n]"
2020-03-25 21:38:44.251 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 >> "[\r][\n]"
2020-03-25 21:38:44.332 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 << "HTTP/1.1 200 [\r][\n]"
2020-03-25 21:38:44.333 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 << "Set-Cookie: JSESSIONID=8CE2FFB2E51F9AA162D7221DB8387568; Path=/; HttpOnly[\r][\n]"
2020-03-25 21:38:44.333 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 << "X-Content-Type-Options: nosniff[\r][\n]"
2020-03-25 21:38:44.333 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 << "X-XSS-Protection: 1; mode=block[\r][\n]"
2020-03-25 21:38:44.333 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 << "Cache-Control: no-cache, no-store, max-age=0, must-revalidate[\r][\n]"
2020-03-25 21:38:44.333 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 << "Pragma: no-cache[\r][\n]"
2020-03-25 21:38:44.333 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 << "Expires: 0[\r][\n]"
2020-03-25 21:38:44.333 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 << "X-Frame-Options: DENY[\r][\n]"
2020-03-25 21:38:44.333 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 << "Content-Type: application/json;charset=UTF-8[\r][\n]"
2020-03-25 21:38:44.333 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 << "Transfer-Encoding: chunked[\r][\n]"
2020-03-25 21:38:44.333 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 << "Date: Wed, 25 Mar 2020 20:38:44 GMT[\r][\n]"
2020-03-25 21:38:44.333 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 << "[\r][\n]"
2020-03-25 21:38:44.333 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 << "d[\r][\n]"
2020-03-25 21:38:44.333 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 << "["ROLE_ROOT"][\r][\n]"
2020-03-25 21:38:44.335 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-0 << HTTP/1.1 200 
2020-03-25 21:38:44.335 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-0 << Set-Cookie: JSESSIONID=8CE2FFB2E51F9AA162D7221DB8387568; Path=/; HttpOnly
2020-03-25 21:38:44.335 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-0 << X-Content-Type-Options: nosniff
2020-03-25 21:38:44.335 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-0 << X-XSS-Protection: 1; mode=block
2020-03-25 21:38:44.335 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-0 << Cache-Control: no-cache, no-store, max-age=0, must-revalidate
2020-03-25 21:38:44.335 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-0 << Pragma: no-cache
2020-03-25 21:38:44.335 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-0 << Expires: 0
2020-03-25 21:38:44.335 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-0 << X-Frame-Options: DENY
2020-03-25 21:38:44.335 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-0 << Content-Type: application/json;charset=UTF-8
2020-03-25 21:38:44.335 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-0 << Transfer-Encoding: chunked
2020-03-25 21:38:44.335 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-0 << Date: Wed, 25 Mar 2020 20:38:44 GMT
2020-03-25 21:38:44.349 DEBUG 13445 --- [main] o.a.http.impl.execchain.MainClientExec   : Connection can be kept alive indefinitely
2020-03-25 21:38:44.353 DEBUG 13445 --- [main] o.a.h.c.protocol.ResponseProcessCookies  : Cookie accepted [JSESSIONID="8CE2FFB2E51F9AA162D7221DB8387568", version:0, domain:localhost, path:/, expiry:null]
2020-03-25 21:38:44.378 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 << "0[\r][\n]"
2020-03-25 21:38:44.378 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-0 << "[\r][\n]"
2020-03-25 21:38:44.378 DEBUG 13445 --- [main] h.i.c.PoolingHttpClientConnectionManager : Connection [id: 0][route: {}->http://localhost:8086] can be kept alive indefinitely
2020-03-25 21:38:44.378 DEBUG 13445 --- [main] h.i.c.DefaultManagedHttpClientConnection : http-outgoing-0: set socket timeout to 0
2020-03-25 21:38:44.378 DEBUG 13445 --- [main] h.i.c.PoolingHttpClientConnectionManager : Connection released: [id: 0][route: {}->http://localhost:8086][total kept alive: 1; route allocated: 1 of 5; total allocated: 1 of 10]
2020-03-25 21:38:44.380 TRACE 13445 --- [main] d.d.proseo.ui.backend.ServiceConnection  : <<< getFromService()
2020-03-25 21:38:44.380 TRACE 13445 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2821, [sysadm])
2020-03-25 21:38:44.380  INFO 13445 --- [main] de.dlr.proseo.ui.backend.LoginManager    : (I2821) User sysadm logged in
2020-03-25 21:38:44.381 DEBUG 13445 --- [main] de.dlr.proseo.ui.backend.LoginManager    : ... with authorities: [ROLE_ROOT]
2020-03-25 21:38:44.381 TRACE 13445 --- [main] de.dlr.proseo.ui.backend.LoginManager    : <<< doLogin()
2020-03-25 21:38:44.381 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< executeCommand({})
2020-03-25 21:38:50.028 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parse(mission create --file=PTM.json)
2020-03-25 21:38:50.029 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parseOption(--file=PTM.json, create)
2020-03-25 21:38:50.029 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parseOption()
2020-03-25 21:38:50.029 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parse()
2020-03-25 21:38:50.029 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : ... received command 'mission'
2020-03-25 21:38:50.029 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> executeCommand(mission)
2020-03-25 21:38:50.029 TRACE 13445 --- [main] d.d.proseo.ui.cli.MissionCommandRunner   : >>> executeCommand(mission)
2020-03-25 21:38:50.029 TRACE 13445 --- [main] d.d.proseo.ui.cli.MissionCommandRunner   : >>> createMission(create)
2020-03-25 21:38:50.031 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.CLIUtil             : >>> parseObjectFile(PTM.json, JSON, class de.dlr.proseo.model.rest.model.RestMission)
2020-03-25 21:38:50.063 TRACE 13445 --- [main] d.d.proseo.ui.backend.ServiceConnection  : >>> postToService(http://localhost:8082/proseo/order-mgr/v0.1, /missions, object, user, password)
2020-03-25 21:38:50.070 TRACE 13445 --- [main] d.d.proseo.ui.backend.ServiceConnection  : ... calling service URL http://localhost:8082/proseo/order-mgr/v0.1/missions with POST
2020-03-25 21:38:50.103 DEBUG 13445 --- [main] o.a.h.client.protocol.RequestAddCookies  : CookieSpec selected: default
2020-03-25 21:38:50.103 DEBUG 13445 --- [main] o.a.h.client.protocol.RequestAuthCache   : Auth cache not set in the context
2020-03-25 21:38:50.104 DEBUG 13445 --- [main] h.i.c.PoolingHttpClientConnectionManager : Connection request: [route: {}->http://localhost:8082][total kept alive: 0; route allocated: 0 of 5; total allocated: 0 of 10]
2020-03-25 21:38:50.104 DEBUG 13445 --- [main] h.i.c.PoolingHttpClientConnectionManager : Connection leased: [id: 1][route: {}->http://localhost:8082][total kept alive: 0; route allocated: 1 of 5; total allocated: 1 of 10]
2020-03-25 21:38:50.104 DEBUG 13445 --- [main] o.a.http.impl.execchain.MainClientExec   : Opening connection {}->http://localhost:8082
2020-03-25 21:38:50.104 DEBUG 13445 --- [main] .i.c.DefaultHttpClientConnectionOperator : Connecting to localhost/127.0.0.1:8082
2020-03-25 21:38:50.104 DEBUG 13445 --- [main] .i.c.DefaultHttpClientConnectionOperator : Connection established 127.0.0.1:57114<->127.0.0.1:8082
2020-03-25 21:38:50.104 DEBUG 13445 --- [main] o.a.http.impl.execchain.MainClientExec   : Executing request POST /proseo/order-mgr/v0.1/missions HTTP/1.1
2020-03-25 21:38:50.104 DEBUG 13445 --- [main] o.a.http.impl.execchain.MainClientExec   : Proxy auth state: UNCHALLENGED
2020-03-25 21:38:50.104 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-1 >> POST /proseo/order-mgr/v0.1/missions HTTP/1.1
2020-03-25 21:38:50.104 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-1 >> Accept: application/json, application/xml, application/*+json, text/xml, application/*+xml
2020-03-25 21:38:50.104 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-1 >> Content-Type: application/json;charset=UTF-8
2020-03-25 21:38:50.105 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-1 >> Authorization: Basic c3lzYWRtOnN5c2FkbQ==
2020-03-25 21:38:50.105 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-1 >> Content-Length: 916
2020-03-25 21:38:50.105 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-1 >> Host: localhost:8082
2020-03-25 21:38:50.105 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-1 >> Connection: Keep-Alive
2020-03-25 21:38:50.105 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-1 >> User-Agent: Apache-HttpClient/4.5.9 (Java/11.0.3)
2020-03-25 21:38:50.105 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-1 >> Accept-Encoding: gzip,deflate
2020-03-25 21:38:50.105 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 >> "POST /proseo/order-mgr/v0.1/missions HTTP/1.1[\r][\n]"
2020-03-25 21:38:50.105 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 >> "Accept: application/json, application/xml, application/*+json, text/xml, application/*+xml[\r][\n]"
2020-03-25 21:38:50.105 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 >> "Content-Type: application/json;charset=UTF-8[\r][\n]"
2020-03-25 21:38:50.105 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 >> "Authorization: Basic c3lzYWRtOnN5c2FkbQ==[\r][\n]"
2020-03-25 21:38:50.105 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 >> "Content-Length: 916[\r][\n]"
2020-03-25 21:38:50.105 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 >> "Host: localhost:8082[\r][\n]"
2020-03-25 21:38:50.105 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 >> "Connection: Keep-Alive[\r][\n]"
2020-03-25 21:38:50.105 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 >> "User-Agent: Apache-HttpClient/4.5.9 (Java/11.0.3)[\r][\n]"
2020-03-25 21:38:50.105 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 >> "Accept-Encoding: gzip,deflate[\r][\n]"
2020-03-25 21:38:50.105 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 >> "[\r][\n]"
2020-03-25 21:38:50.105 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 >> "{"id":null,"version":null,"code":"PTM","name":"prosEO Test Mission","fileClasses":["TEST","OPER"],"processingModes":["OPER"],"productFileTemplate":"PTM_${fileClass}_${productClass.missionType}_${T(java.time.format.DateTimeFormatter).ofPattern(\"uuuuMMdd'T'HHmmss\").withZone(T(java.time.ZoneId).of(\"UTC\")).format(sensingStartTime)}_${T(java.time.format.DateTimeFormatter).ofPattern(\"uuuuMMdd'T'HHmmss\").withZone(T(java.time.ZoneId).of(\"UTC\")).format(sensingStopTime)}_${(new java.text.DecimalFormat(\"00000\")).format(orbit.orbitNumber)}_${parameters.get(\"copernicusCollection\").getParameterValue()}_${configuredProcessor.processor.processorVersion.replaceAll(\"\\\\.\", \"\")}_${T(java.time.format.DateTimeFormatter).ofPattern(\"uuuuMMdd'T'HHmmss\").withZone(T(java.time.ZoneId).of(\"UTC\")).format(generationTime)}.nc","spacecrafts":[{"id":null,"version":null,"code":"PTS","name":"prosEO Test Satellite"}]}"
2020-03-25 21:38:50.185 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 << "HTTP/1.1 500 [\r][\n]"
2020-03-25 21:38:50.185 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 << "Set-Cookie: JSESSIONID=EC6184041E8B5015476F9896817B8E30; Path=/; HttpOnly[\r][\n]"
2020-03-25 21:38:50.185 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 << "X-Content-Type-Options: nosniff[\r][\n]"
2020-03-25 21:38:50.185 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 << "X-XSS-Protection: 1; mode=block[\r][\n]"
2020-03-25 21:38:50.185 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 << "Cache-Control: no-cache, no-store, max-age=0, must-revalidate[\r][\n]"
2020-03-25 21:38:50.185 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 << "Pragma: no-cache[\r][\n]"
2020-03-25 21:38:50.185 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 << "Expires: 0[\r][\n]"
2020-03-25 21:38:50.185 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 << "X-Frame-Options: DENY[\r][\n]"
2020-03-25 21:38:50.185 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 << "Content-Type: application/json;charset=UTF-8[\r][\n]"
2020-03-25 21:38:50.185 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 << "Transfer-Encoding: chunked[\r][\n]"
2020-03-25 21:38:50.185 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 << "Date: Wed, 25 Mar 2020 20:38:50 GMT[\r][\n]"
2020-03-25 21:38:50.185 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 << "Connection: close[\r][\n]"
2020-03-25 21:38:50.186 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 << "[\r][\n]"
2020-03-25 21:38:50.186 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 << "146[\r][\n]"
2020-03-25 21:38:50.186 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 << "{"timestamp":"2020-03-25T20:38:50.183+0000","status":500,"error":"Internal Server Error","message":"could not execute statement; SQL [n/a]; constraint [uktio2ulw4k2037685uaayxtuub]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement","path":"/proseo/order-mgr/v0.1/missions"}[\r][\n]"
2020-03-25 21:38:50.186 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-1 << HTTP/1.1 500 
2020-03-25 21:38:50.186 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-1 << Set-Cookie: JSESSIONID=EC6184041E8B5015476F9896817B8E30; Path=/; HttpOnly
2020-03-25 21:38:50.186 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-1 << X-Content-Type-Options: nosniff
2020-03-25 21:38:50.186 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-1 << X-XSS-Protection: 1; mode=block
2020-03-25 21:38:50.186 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-1 << Cache-Control: no-cache, no-store, max-age=0, must-revalidate
2020-03-25 21:38:50.186 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-1 << Pragma: no-cache
2020-03-25 21:38:50.186 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-1 << Expires: 0
2020-03-25 21:38:50.186 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-1 << X-Frame-Options: DENY
2020-03-25 21:38:50.186 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-1 << Content-Type: application/json;charset=UTF-8
2020-03-25 21:38:50.186 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-1 << Transfer-Encoding: chunked
2020-03-25 21:38:50.186 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-1 << Date: Wed, 25 Mar 2020 20:38:50 GMT
2020-03-25 21:38:50.186 DEBUG 13445 --- [main] org.apache.http.headers                  : http-outgoing-1 << Connection: close
2020-03-25 21:38:50.186 DEBUG 13445 --- [main] o.a.h.c.protocol.ResponseProcessCookies  : Cookie accepted [JSESSIONID="EC6184041E8B5015476F9896817B8E30", version:0, domain:localhost, path:/, expiry:null]
2020-03-25 21:38:50.187 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 << "0[\r][\n]"
2020-03-25 21:38:50.187 DEBUG 13445 --- [main] org.apache.http.wire                     : http-outgoing-1 << "[\r][\n]"
2020-03-25 21:38:50.187 DEBUG 13445 --- [main] h.i.c.DefaultManagedHttpClientConnection : http-outgoing-1: Close connection
2020-03-25 21:38:50.188 DEBUG 13445 --- [main] o.a.http.impl.execchain.MainClientExec   : Connection discarded
2020-03-25 21:38:50.188 DEBUG 13445 --- [main] h.i.c.PoolingHttpClientConnectionManager : Connection released: [id: 1][route: {}->http://localhost:8082][total kept alive: 0; route allocated: 0 of 5; total allocated: 0 of 10]
2020-03-25 21:38:50.190 TRACE 13445 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2810, [500 ])
2020-03-25 21:38:50.191 ERROR 13445 --- [main] d.d.proseo.ui.backend.ServiceConnection  : (E2810) HTTP request failed (cause: 500 )

org.springframework.web.client.HttpServerErrorException$InternalServerError: 500 
	at org.springframework.web.client.HttpServerErrorException.create(HttpServerErrorException.java:79)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:124)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:102)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:778)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:736)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:670)
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:445)
	at de.dlr.proseo.ui.backend.ServiceConnection.postToService(ServiceConnection.java:191)
	at de.dlr.proseo.ui.cli.MissionCommandRunner.createMission(MissionCommandRunner.java:219)
	at de.dlr.proseo.ui.cli.MissionCommandRunner.executeCommand(MissionCommandRunner.java:1186)
	at de.dlr.proseo.ui.cli.CommandLineInterface.executeCommand(CommandLineInterface.java:199)
	at de.dlr.proseo.ui.cli.CommandLineInterface.run(CommandLineInterface.java:301)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:779)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:763)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202)
	at de.dlr.proseo.ui.cli.CommandLineInterface.main(CommandLineInterface.java:314)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:47)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:86)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:50)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51)

2020-03-25 21:38:50.191 TRACE 13445 --- [main] de.dlr.proseo.ui.backend.UIMessages      : >>> uiMsg(2806, [(E2810) HTTP request failed (cause: 500 ); nested exception is org.springframework.web.client.HttpServerErrorException$InternalServerError: 500 ])
2020-03-25 21:38:50.191 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< executeCommand({})
2020-03-25 21:38:52.892 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : >>> parse(exit)
2020-03-25 21:38:52.892 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< parse()
2020-03-25 21:38:52.892 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : ... received command 'exit'
2020-03-25 21:38:52.892 TRACE 13445 --- [main] de.dlr.proseo.ui.cli.parser.CLIParser    : <<< run()
